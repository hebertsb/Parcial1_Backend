# 🏠 GUÍA COMPLETA: CREAR SOLICITUD DE PROPIETARIOS
# Para tu asistente de frontend - Next.js + TypeScript
# Fecha: 24 de Septiembre, 2025

================================================================================
📋 FUNCIONALIDAD: CREAR SOLICITUD DE PROPIETARIO
================================================================================

## 🎯 OBJETIVO
Permitir que usuarios sin cuenta puedan registrarse como propietarios enviando una solicitud que será revisada por un administrador.

## 🔧 ENDPOINT DEL BACKEND

**URL:** `POST /api/authz/propietarios/registrar-solicitud/`
**Tipo:** Public (no requiere autenticación)
**Content-Type:** `application/json`

## 📝 ESTRUCTURA DEL FORMULARIO

### CAMPOS REQUERIDOS:
```typescript
interface SolicitudPropietario {
  // Datos personales
  nombre: string;           // Nombre completo
  apellido: string;         // Apellidos
  email: string;           // Email único
  telefono: string;        // Teléfono de contacto
  documento_identidad: string; // CI/Pasaporte
  fecha_nacimiento: string;    // Formato: YYYY-MM-DD
  
  // Datos de la vivienda
  numero_vivienda: string; // Número de departamento/casa
  direccion_completa: string; // Dirección completa
  
  // Documentación (opcional)
  notas?: string;          // Notas adicionales
}
```

### VALIDACIONES FRONTEND:
```typescript
const validacionesSolicitud = {
  nombre: {
    required: "El nombre es obligatorio",
    minLength: { value: 2, message: "Mínimo 2 caracteres" }
  },
  apellido: {
    required: "El apellido es obligatorio",
    minLength: { value: 2, message: "Mínimo 2 caracteres" }
  },
  email: {
    required: "El email es obligatorio",
    pattern: {
      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
      message: "Email inválido"
    }
  },
  telefono: {
    required: "El teléfono es obligatorio",
    pattern: {
      value: /^\+?[1-9]\d{1,14}$/,
      message: "Formato: +591-70000000"
    }
  },
  documento_identidad: {
    required: "El documento es obligatorio",
    minLength: { value: 6, message: "Mínimo 6 caracteres" }
  },
  fecha_nacimiento: {
    required: "La fecha de nacimiento es obligatoria"
  },
  numero_vivienda: {
    required: "El número de vivienda es obligatorio"
  },
  direccion_completa: {
    required: "La dirección es obligatoria",
    minLength: { value: 10, message: "Dirección muy corta" }
  }
};
```

================================================================================
💻 IMPLEMENTACIÓN EN NEXT.JS
================================================================================

## 1. 📂 ESTRUCTURA DE ARCHIVOS

```
src/
├── app/
│   └── solicitud-propietario/
│       └── page.tsx              # Página principal del formulario
├── components/
│   └── solicitud/
│       ├── FormularioSolicitud.tsx    # Componente del formulario
│       ├── ConfirmacionSolicitud.tsx  # Página de confirmación
│       └── ValidacionesSolicitud.ts   # Validaciones
├── services/
│   └── solicitud-api.ts          # API calls
└── types/
    └── solicitud.types.ts        # TypeScript types
```

## 2. 🎨 COMPONENTE DEL FORMULARIO

### `components/solicitud/FormularioSolicitud.tsx`:
```typescript
'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { SolicitudPropietario } from '@/types/solicitud.types';
import { crearSolicitudPropietario } from '@/services/solicitud-api';
import { validacionesSolicitud } from './ValidacionesSolicitud';

export default function FormularioSolicitud() {
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset
  } = useForm<SolicitudPropietario>();

  const onSubmit = async (data: SolicitudPropietario) => {
    setLoading(true);
    setError(null);
    
    try {
      await crearSolicitudPropietario(data);
      setSuccess(true);
      reset();
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Error al enviar solicitud');
    } finally {
      setLoading(false);
    }
  };

  if (success) {
    return <ConfirmacionSolicitud />;
  }

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-lg">
      <h1 className="text-2xl font-bold text-center mb-6 text-gray-800">
        🏠 Solicitud de Registro como Propietario
      </h1>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        
        {/* SECCIÓN: DATOS PERSONALES */}
        <div className="border-l-4 border-blue-500 pl-4">
          <h2 className="text-lg font-semibold text-gray-700 mb-4">
            👤 Datos Personales
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Nombre *
              </label>
              <input
                type="text"
                {...register('nombre', validacionesSolicitud.nombre)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Ej: María Elena"
              />
              {errors.nombre && (
                <p className="text-red-500 text-sm mt-1">{errors.nombre.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Apellido *
              </label>
              <input
                type="text"
                {...register('apellido', validacionesSolicitud.apellido)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Ej: González López"
              />
              {errors.apellido && (
                <p className="text-red-500 text-sm mt-1">{errors.apellido.message}</p>
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email *
              </label>
              <input
                type="email"
                {...register('email', validacionesSolicitud.email)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Ej: maria.gonzalez@email.com"
              />
              {errors.email && (
                <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Teléfono *
              </label>
              <input
                type="tel"
                {...register('telefono', validacionesSolicitud.telefono)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Ej: +591-70000000"
              />
              {errors.telefono && (
                <p className="text-red-500 text-sm mt-1">{errors.telefono.message}</p>
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Documento de Identidad *
              </label>
              <input
                type="text"
                {...register('documento_identidad', validacionesSolicitud.documento_identidad)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Ej: 12345678"
              />
              {errors.documento_identidad && (
                <p className="text-red-500 text-sm mt-1">{errors.documento_identidad.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Fecha de Nacimiento *
              </label>
              <input
                type="date"
                {...register('fecha_nacimiento', validacionesSolicitud.fecha_nacimiento)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
              {errors.fecha_nacimiento && (
                <p className="text-red-500 text-sm mt-1">{errors.fecha_nacimiento.message}</p>
              )}
            </div>
          </div>
        </div>

        {/* SECCIÓN: DATOS DE VIVIENDA */}
        <div className="border-l-4 border-green-500 pl-4">
          <h2 className="text-lg font-semibold text-gray-700 mb-4">
            🏠 Datos de la Vivienda
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Número de Vivienda *
              </label>
              <input
                type="text"
                {...register('numero_vivienda', validacionesSolicitud.numero_vivienda)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-green-500"
                placeholder="Ej: Depto. 3B, Casa 101"
              />
              {errors.numero_vivienda && (
                <p className="text-red-500 text-sm mt-1">{errors.numero_vivienda.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Dirección Completa *
              </label>
              <input
                type="text"
                {...register('direccion_completa', validacionesSolicitud.direccion_completa)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-green-500"
                placeholder="Ej: Av. Siempre Viva 123, Zona Sur"
              />
              {errors.direccion_completa && (
                <p className="text-red-500 text-sm mt-1">{errors.direccion_completa.message}</p>
              )}
            </div>
          </div>
        </div>

        {/* SECCIÓN: NOTAS ADICIONALES */}
        <div className="border-l-4 border-orange-500 pl-4">
          <h2 className="text-lg font-semibold text-gray-700 mb-4">
            📝 Información Adicional (Opcional)
          </h2>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Notas o comentarios
            </label>
            <textarea
              {...register('notas')}
              rows={4}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
              placeholder="Cualquier información adicional que considere importante..."
            />
          </div>
        </div>

        {/* ERROR MESSAGE */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <span className="text-red-400">⚠️</span>
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-700">{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* SUBMIT BUTTON */}
        <div className="flex justify-center">
          <button
            type="submit"
            disabled={loading}
            className={`px-8 py-3 rounded-lg text-white font-semibold ${
              loading 
                ? 'bg-gray-400 cursor-not-allowed' 
                : 'bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-200'
            } transition duration-200`}
          >
            {loading ? (
              <>
                <span className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                Enviando solicitud...
              </>
            ) : (
              <>
                📤 Enviar Solicitud
              </>
            )}
          </button>
        </div>
      </form>

      {/* INFORMACIÓN ADICIONAL */}
      <div className="mt-8 p-4 bg-blue-50 rounded-lg">
        <h3 className="font-semibold text-blue-800 mb-2">ℹ️ Información Importante:</h3>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>• Su solicitud será revisada por un administrador</li>
          <li>• Recibirá una notificación por email sobre el estado de su solicitud</li>
          <li>• El proceso de aprobación puede tomar 1-3 días hábiles</li>
          <li>• Todos los campos marcados con (*) son obligatorios</li>
        </ul>
      </div>
    </div>
  );
}
```

## 3. 🎉 COMPONENTE DE CONFIRMACIÓN

### `components/solicitud/ConfirmacionSolicitud.tsx`:
```typescript
import Link from 'next/link';

export default function ConfirmacionSolicitud() {
  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg text-center">
      <div className="mb-6">
        <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-4">
          <span className="text-2xl">✅</span>
        </div>
        <h1 className="text-2xl font-bold text-gray-800 mb-2">
          ¡Solicitud Enviada!
        </h1>
        <p className="text-gray-600">
          Su solicitud de registro como propietario ha sido enviada exitosamente.
        </p>
      </div>

      <div className="bg-blue-50 rounded-lg p-4 mb-6">
        <h2 className="font-semibold text-blue-800 mb-2">📧 Próximos pasos:</h2>
        <ul className="text-sm text-blue-700 text-left space-y-1">
          <li>• Recibirá un email de confirmación</li>
          <li>• Un administrador revisará su solicitud</li>
          <li>• Le notificaremos la decisión por email</li>
          <li>• Si es aprobado, podrá acceder al sistema</li>
        </ul>
      </div>

      <div className="space-y-3">
        <Link 
          href="/"
          className="block w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-200"
        >
          🏠 Volver al inicio
        </Link>
        <Link 
          href="/auth/login"
          className="block w-full px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition duration-200"
        >
          🔐 ¿Ya tiene cuenta? Iniciar sesión
        </Link>
      </div>
    </div>
  );
}
```

## 4. 🔌 SERVICIO DE API

### `services/solicitud-api.ts`:
```typescript
import axios from 'axios';
import { SolicitudPropietario } from '@/types/solicitud.types';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000';

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

export const crearSolicitudPropietario = async (data: SolicitudPropietario) => {
  try {
    const response = await api.post('/api/authz/propietarios/registrar-solicitud/', data);
    return response.data;
  } catch (error: any) {
    console.error('Error al crear solicitud:', error);
    throw error;
  }
};

export default api;
```

## 5. 📝 TIPOS TYPESCRIPT

### `types/solicitud.types.ts`:
```typescript
export interface SolicitudPropietario {
  nombre: string;
  apellido: string;
  email: string;
  telefono: string;
  documento_identidad: string;
  fecha_nacimiento: string;
  numero_vivienda: string;
  direccion_completa: string;
  notas?: string;
}

export interface SolicitudResponse {
  id: number;
  estado: 'PENDIENTE' | 'APROBADA' | 'RECHAZADA';
  fecha_solicitud: string;
  mensaje?: string;
}
```

## 6. 🛠️ VALIDACIONES

### `components/solicitud/ValidacionesSolicitud.ts`:
```typescript
export const validacionesSolicitud = {
  nombre: {
    required: "El nombre es obligatorio",
    minLength: { value: 2, message: "El nombre debe tener al menos 2 caracteres" },
    maxLength: { value: 50, message: "El nombre no puede tener más de 50 caracteres" }
  },
  apellido: {
    required: "El apellido es obligatorio",
    minLength: { value: 2, message: "El apellido debe tener al menos 2 caracteres" },
    maxLength: { value: 50, message: "El apellido no puede tener más de 50 caracteres" }
  },
  email: {
    required: "El email es obligatorio",
    pattern: {
      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
      message: "Por favor ingrese un email válido"
    }
  },
  telefono: {
    required: "El teléfono es obligatorio",
    pattern: {
      value: /^\+?[1-9]\d{1,14}$/,
      message: "Formato válido: +591-70000000 o 70000000"
    }
  },
  documento_identidad: {
    required: "El documento de identidad es obligatorio",
    minLength: { value: 6, message: "El documento debe tener al menos 6 caracteres" },
    maxLength: { value: 20, message: "El documento no puede tener más de 20 caracteres" }
  },
  fecha_nacimiento: {
    required: "La fecha de nacimiento es obligatoria",
    validate: (value: string) => {
      const today = new Date();
      const birthDate = new Date(value);
      const age = today.getFullYear() - birthDate.getFullYear();
      
      if (age < 18) {
        return "Debe ser mayor de 18 años";
      }
      if (age > 120) {
        return "Por favor verifique la fecha de nacimiento";
      }
      return true;
    }
  },
  numero_vivienda: {
    required: "El número de vivienda es obligatorio",
    minLength: { value: 1, message: "Ingrese el número o identificación de su vivienda" }
  },
  direccion_completa: {
    required: "La dirección completa es obligatoria",
    minLength: { value: 10, message: "La dirección debe ser más específica (mínimo 10 caracteres)" },
    maxLength: { value: 200, message: "La dirección no puede tener más de 200 caracteres" }
  }
};
```

================================================================================
🚀 PÁGINA PRINCIPAL DE LA SOLICITUD
================================================================================

### `app/solicitud-propietario/page.tsx`:
```typescript
import FormularioSolicitud from '@/components/solicitud/FormularioSolicitud';
import { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Solicitud de Propietario | Sistema de Gestión',
  description: 'Registre su solicitud para acceso como propietario al sistema',
};

export default function SolicitudPropietarioPage() {
  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4">
      <div className="max-w-4xl mx-auto">
        {/* HEADER */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            🏠 Sistema de Gestión Residencial
          </h1>
          <p className="text-lg text-gray-600">
            Solicitud de Registro como Propietario
          </p>
        </div>

        {/* FORMULARIO */}
        <FormularioSolicitud />
        
        {/* INFORMACIÓN ADICIONAL */}
        <div className="mt-12 max-w-2xl mx-auto">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              📋 Proceso de Solicitud
            </h2>
            
            <div className="space-y-4">
              <div className="flex items-start space-x-3">
                <span className="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-blue-600 font-semibold text-sm">1</span>
                <div>
                  <h3 className="font-medium text-gray-800">Envío de Solicitud</h3>
                  <p className="text-sm text-gray-600">Complete todos los campos requeridos y envíe su solicitud</p>
                </div>
              </div>
              
              <div className="flex items-start space-x-3">
                <span className="flex-shrink-0 w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center text-yellow-600 font-semibold text-sm">2</span>
                <div>
                  <h3 className="font-medium text-gray-800">Revisión Administrativa</h3>
                  <p className="text-sm text-gray-600">Un administrador verificará la información proporcionada</p>
                </div>
              </div>
              
              <div className="flex items-start space-x-3">
                <span className="flex-shrink-0 w-8 h-8 bg-green-100 rounded-full flex items-center justify-center text-green-600 font-semibold text-sm">3</span>
                <div>
                  <h3 className="font-medium text-gray-800">Notificación de Resultado</h3>
                  <p className="text-sm text-gray-600">Recibirá un email con la decisión y próximos pasos</p>
                </div>
              </div>
              
              <div className="flex items-start space-x-3">
                <span className="flex-shrink-0 w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center text-purple-600 font-semibold text-sm">4</span>
                <div>
                  <h3 className="font-medium text-gray-800">Acceso al Sistema</h3>
                  <p className="text-sm text-gray-600">Si es aprobado, podrá iniciar sesión y gestionar su vivienda</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
```

================================================================================
⚙️ CONFIGURACIÓN Y NOTAS IMPORTANTES
================================================================================

## 🔧 DEPENDENCIAS NECESARIAS

Asegúrese de tener instaladas estas dependencias:

```bash
npm install react-hook-form axios
npm install -D @types/react-hook-form
```

## 🌐 VARIABLES DE ENTORNO

Agregue en su `.env.local`:

```
NEXT_PUBLIC_API_URL=http://127.0.0.1:8000
```

## 🎨 ESTILOS TAILWIND

Si no usa Tailwind CSS, puede adaptar las clases a su sistema de estilos preferido.

## 🔐 CORS

Recuerde que el backend debe tener CORS configurado para `localhost:3000`:

```python
# En settings.py
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]
```

## 📱 RESPONSIVE

El formulario está diseñado para ser completamente responsive y funcionar en móviles y desktop.

================================================================================
🧪 TESTING Y DEBUGGING
================================================================================

## 🔍 CÓMO PROBAR

1. **Navegar a:** `http://localhost:3000/solicitud-propietario`
2. **Llenar el formulario** con datos de prueba
3. **Verificar validaciones** intentando enviar campos vacíos
4. **Probar envío exitoso** y verificar la pantalla de confirmación
5. **Revisar en el backend** que la solicitud se creó correctamente

## 🐛 POSIBLES ERRORES

### Error CORS:
```
Access to XMLHttpRequest... blocked by CORS policy
```
**Solución:** Verificar que CORS esté configurado en el backend

### Error de validación:
```
Email ya existe en el sistema
```
**Solución:** Usar un email diferente o verificar duplicados

### Error de conexión:
```
Network Error
```
**Solución:** Verificar que el backend esté corriendo en el puerto correcto

================================================================================
🎯 PRÓXIMOS PASOS RECOMENDADOS
================================================================================

1. **Implementar esta guía** paso a paso
2. **Probar la funcionalidad** con datos reales
3. **Ajustar estilos** según el diseño de su aplicación
4. **Agregar notificaciones** (toast/snackbar) para mejor UX
5. **Implementar carga de archivos** si necesita documentos adjuntos

================================================================================
✅ CHECKLIST DE IMPLEMENTACIÓN
================================================================================

- [ ] Crear estructura de archivos y carpetas
- [ ] Implementar FormularioSolicitud.tsx
- [ ] Implementar ConfirmacionSolicitud.tsx  
- [ ] Crear servicio de API (solicitud-api.ts)
- [ ] Definir tipos TypeScript
- [ ] Configurar validaciones
- [ ] Crear página principal
- [ ] Instalar dependencias necesarias
- [ ] Configurar variables de entorno
- [ ] Probar funcionalidad completa
- [ ] Verificar responsive design
- [ ] Testear casos de error

================================================================================
Fin de la guía - 24 de Septiembre, 2025
🎉 ¡Todo listo para implementar!
================================================================================
