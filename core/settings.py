"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

# Cargar variables de entorno
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gekczkfvw9q$26(8quj^v(7!3^tel@f^17r(0(f2crak9^y_%k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "testserver",
    "192.168.0.11",
    "https://parcialgrupo8.netlify.app/",
    "192.168.56.1",  # IP local para Netlify
    "parcial1backend-production.up.railway.app",  # Railway dominio
    "*.up.railway.app",  # Todos los dominios de Railway
    "*",  # Temporal para desarrollo - QUITAR EN PRODUCCIÓN FINAL
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third party apps
    'corsheaders',  # CORS headers para permitir peticiones desde frontend
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_spectacular',
    # Local apps
    'core',
    'authz',
    'blog',
    'seguridad',
    'expensas_multas', 
    'avisos_comunicados',
    'areas_comunes',
    'reservas_areas',
    'mantenimiento',
    'politicas',

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware debe ir PRIMERO
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Descomentado para permitir CORS
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:',  # Base de datos en memoria para Railway
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'face_verify': '10/minute',  # Rate limiting específico para verificación facial
        'face_enroll': '5/minute',   # Rate limiting específico para enrolamiento
    },
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# JWT Configuration
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
}

# Spectacular (OpenAPI) Configuration
SPECTACULAR_SETTINGS = {
    'TITLE': 'Sistema de Reconocimiento Facial API',
    'DESCRIPTION': 'API para sistema de reconocimiento facial de copropietarios',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': r'/api/v[0-9]',
}

# Face Recognition Configuration
FACE_RECOGNITION_PROVIDER = os.getenv('FACE_RECOGNITION_PROVIDER', 'Local')  # 'Microsoft' or 'Local'

# Azure Face API Configuration
AZURE_FACE_API_KEY = os.getenv('AZURE_FACE_API_KEY', '')
AZURE_FACE_ENDPOINT = os.getenv('AZURE_FACE_ENDPOINT', '')

# Local Face Recognition Configuration
FACE_LOCAL_THRESHOLD = float(os.getenv('FACE_LOCAL_THRESHOLD', '0.6'))

# Custom User Model - Comentado temporalmente para migración gradual
AUTH_USER_MODEL = 'authz.Usuario'

# Media Configuration for image uploads
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Logging Configuration

# CORS configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Permite todos los orígenes en desarrollo
CORS_ALLOW_ALL_ORIGINS = True  # Solo para desarrollo

CORS_ALLOW_CREDENTIALS = True

# CSRF configuration for frontend domain
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]
# Asegurar que el directorio de logs exista
LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_DIR / 'face_recognition.log',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'seguridad': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# ============================================================================
# CONFIGURACIÓN CORS - Para conectar con Frontend
# ============================================================================

# Lista de orígenes permitidos (URLs del frontend)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",    # React (puerto por defecto)
    "http://localhost:5173",    # Vite/Vue (puerto por defecto)
    "http://localhost:8080",    # Vue CLI (puerto por defecto)
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5173",
    "http://127.0.0.1:8080",
    "https://stellar-dasik-aa1890.netlify.app",  # Tu frontend en Netlify (URL corregida)
]

# Permitir todas las cabeceras en desarrollo (más flexible)
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Solo en desarrollo

# Cabeceras permitidas explícitamente
CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Métodos HTTP permitidos
CORS_ALLOWED_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Permitir cookies (para autenticación)
CORS_ALLOW_CREDENTIALS = True

# Cabeceras que el frontend puede acceder en la respuesta
CORS_EXPOSE_HEADERS = [
    'Content-Type',
    'X-CSRFToken',
]

# Tiempo de cache para peticiones preflight (OPTIONS)
CORS_PREFLIGHT_MAX_AGE = 86400

# =============================================================================
# CONFIGURACIÓN DE EMAIL
# =============================================================================

# Para desarrollo: usar consola (los emails se muestran en la terminal)
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = 'd:/ParcialBackend/Parcial_1/emails_dev/'  # Carpeta donde se guardarán los emails

# Para producción: configurar SMTP real
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'  # o tu servidor SMTP
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'tu-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'tu-password-app'

# Configuración general de emails
DEFAULT_FROM_EMAIL = 'Sistema Condominio <noreply@condominio.com>'
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# URLs para emails (para enlaces en los templates)
FRONTEND_URL = 'http://localhost:3000'  # URL del frontend
ADMIN_PANEL_URL = 'http://localhost:8000/admin'  # URL del panel admin
