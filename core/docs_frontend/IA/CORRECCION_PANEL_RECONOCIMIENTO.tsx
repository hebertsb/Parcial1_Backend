// üîß CORRECCI√ìN PARA EL PANEL DE RECONOCIMIENTO FACIAL
// Archivo: panel-reconocimiento-facial.tsx
// 
// ‚ùå PROBLEMA: El frontend est√° usando /api/seguridad/dashboard/ (requiere auth)
// ‚úÖ SOLUCI√ìN: Cambiar a /api/seguridad/health/ (sin auth) o manejar autenticaci√≥n

import React, { useState, useEffect } from 'react';

const PanelReconocimientoFacial = () => {
  const [backendStatus, setBackendStatus] = useState('checking');
  const [foto, setFoto] = useState(null);
  const [resultado, setResultado] = useState(null);
  const [cargando, setCargando] = useState(false);

  // üîß CORRECCI√ìN 1: Cambiar verificaci√≥n de conexi√≥n
  const verificarConexionBackend = async () => {
    try {
      console.log('üîç Verificando conexi√≥n con backend...');
      
      // ‚úÖ CAMBIAR ESTA L√çNEA:
      // const response = await fetch('http://127.0.0.1:8000/api/seguridad/dashboard/'); // ‚ùå 401
      
      // ‚úÖ POR ESTA:
      const response = await fetch('http://127.0.0.1:8000/api/seguridad/health/'); // ‚úÖ Sin auth
      
      console.log('üåê Test conexi√≥n:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Backend funcionando:', data.message);
        setBackendStatus('online');
      } else {
        console.log('‚ùå Backend error:', response.status);
        setBackendStatus('error');
      }
    } catch (error) {
      console.error('üí• Error cr√≠tico:', error);
      setBackendStatus('offline');
      throw new Error('Backend no disponible - Verificar que Django est√© corriendo en puerto 8000');
    }
  };

  // üîß CORRECCI√ìN 2: Verificar conexi√≥n al montar componente
  useEffect(() => {
    verificarConexionBackend().catch(error => {
      console.error('Error en verificaci√≥n inicial:', error.message);
    });
  }, []);

  // ‚úÖ FUNCI√ìN DE VERIFICACI√ìN DE IDENTIDAD (esta est√° bien)
  const verificarIdentidad = async () => {
    if (!foto) {
      alert('Por favor selecciona una foto primero');
      return;
    }

    setCargando(true);
    setResultado(null);

    try {
      // Verificar conexi√≥n antes de procesar
      await verificarConexionBackend();

      const formData = new FormData();
      formData.append('foto_verificacion', foto);
      formData.append('umbral_confianza', '70.0');
      formData.append('buscar_en', 'propietarios');
      formData.append('usar_ia_real', 'false'); // Empezar con simulaci√≥n

      console.log('üìÇ Archivo v√°lido:', {
        nombre: foto.name,
        tama√±o_mb: (foto.size / 1024 / 1024).toFixed(2),
        tipo: foto.type
      });

      const response = await fetch('http://127.0.0.1:8000/api/seguridad/verificacion-tiempo-real/', {
        method: 'POST',
        body: formData
      });

      const data = await response.json();

      if (response.ok && data.success) {
        setResultado({
          tipo: data.verificacion.resultado === 'ACEPTADO' ? 'exito' : 'denegado',
          data: data
        });
      } else {
        setResultado({
          tipo: 'error',
          mensaje: data.error || 'Error desconocido'
        });
      }
    } catch (error) {
      console.error('Error en verificaci√≥n:', error);
      setResultado({
        tipo: 'error',
        mensaje: error.message
      });
    } finally {
      setCargando(false);
    }
  };

  return (
    <div className="panel-reconocimiento-facial">
      <h2>Verificaci√≥n Facial con IA</h2>
      
      {/* Estado del backend */}
      <div className="backend-status">
        {backendStatus === 'checking' && 'üîÑ Verificando conexi√≥n...'}
        {backendStatus === 'online' && '‚úÖ Backend conectado'}
        {backendStatus === 'error' && '‚ö†Ô∏è Backend con errores'}
        {backendStatus === 'offline' && '‚ùå Backend no disponible'}
      </div>

      {/* Captura de foto */}
      <div className="captura-foto">
        <input
          type="file"
          accept="image/*"
          onChange={(e) => setFoto(e.target.files[0])}
        />
      </div>

      {/* Bot√≥n de verificaci√≥n */}
      <button
        onClick={verificarIdentidad}
        disabled={!foto || cargando || backendStatus !== 'online'}
      >
        {cargando ? '‚è≥ Verificando...' : 'üîç Verificar Identidad'}
      </button>

      {/* Resultado */}
      {resultado && (
        <div className={`resultado ${resultado.tipo}`}>
          {resultado.tipo === 'exito' && (
            <div>
              <h3>‚úÖ ACCESO AUTORIZADO</h3>
              <p>üë§ {resultado.data.verificacion.persona_identificada.nombre_completo}</p>
              <p>üéØ Confianza: {resultado.data.verificacion.confianza.toFixed(1)}%</p>
            </div>
          )}
          {resultado.tipo === 'denegado' && (
            <div>
              <h3>‚ùå ACCESO DENEGADO</h3>
              <p>üìä Confianza: {resultado.data.verificacion.confianza.toFixed(1)}%</p>
            </div>
          )}
          {resultado.tipo === 'error' && (
            <div>
              <h3>‚ö†Ô∏è ERROR</h3>
              <p>{resultado.mensaje}</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default PanelReconocimientoFacial;

// üìã RESUMEN DE CAMBIOS NECESARIOS:
// 
// 1. ‚úÖ CAMBIAR l√≠nea ~100:
//    ‚ùå fetch('http://127.0.0.1:8000/api/seguridad/dashboard/')
//    ‚úÖ fetch('http://127.0.0.1:8000/api/seguridad/health/')
//
// 2. ‚úÖ AGREGAR manejo de estado del backend
//
// 3. ‚úÖ VERIFICAR conexi√≥n antes de cada operaci√≥n
//
// 4. ‚úÖ MEJORAR manejo de errores
//
// üí° ALTERNATIVA: Si necesitas el dashboard, primero hacer login:
//    1. POST /authz/login/ con credenciales
//    2. Usar token en header Authorization: Bearer <token>
//    3. Luego acceder a /api/seguridad/dashboard/