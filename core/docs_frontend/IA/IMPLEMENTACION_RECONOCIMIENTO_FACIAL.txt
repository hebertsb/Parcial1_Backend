================================================================================
DOCUMENTACI√ìN PARA FRONTEND - RECONOCIMIENTO FACIAL EN PANEL DE SEGURIDAD
================================================================================

üéØ OBJETIVO:
Integrar reconocimiento facial en tiempo real en el panel de seguridad.
Permite que guardias verifiquen identidad de propietarios/inquilinos subiendo fotos.

================================================================================
üì° ENDPOINT PRINCIPAL
================================================================================

URL: POST /api/seguridad/verificacion-tiempo-real/
Content-Type: multipart/form-data
Autenticaci√≥n: No requerida (para pruebas) - Reactivar en producci√≥n

================================================================================
üì§ PAR√ÅMETROS DE ENTRADA (Form Data)
================================================================================

OBLIGATORIOS:
- foto_verificacion: File (JPEG/PNG) - Foto de la persona a verificar

OPCIONALES:
- umbral_confianza: String - Porcentaje de confianza (default: "85.0")
                            Recomendado: "70.0" para m√°s reconocimientos
- buscar_en: String - "propietarios" | "inquilinos" | "todos" (default: "todos")
- usar_ia_real: String - "true" | "false" (default: "false")
                        "true" = IA real con OpenCV
                        "false" = Simulaci√≥n (para desarrollo)

================================================================================
üì• RESPUESTA DEL SERVIDOR
================================================================================

STATUS 200 - √âXITO:
{
    "success": true,
    "verificacion": {
        "persona_identificada": {
            "copropietario_id": 19,
            "nombre_completo": "Luis Delgadillo",
            "documento": "12345678",
            "unidad": "Depto 301",
            "tipo_residente": "Propietario",
            "foto_perfil": "url_foto_perfil"
        },
        "confianza": 89.5,
        "umbral_usado": 70.0,
        "resultado": "ACEPTADO",
        "timestamp": "2025-09-29T14:30:00Z",
        "foto_comparada": "url_foto_que_coincidio"
    },
    "estadisticas": {
        "total_comparaciones": 10,
        "sobre_umbral": 3,
        "umbral_usado": 70.0,
        "tiempo_procesamiento_ms": 1250.5,
        "personas_analizadas": 10,
        "mejor_coincidencia": 89.5
    }
}

STATUS 400 - ERROR PAR√ÅMETROS:
{
    "success": false,
    "error": "Se requiere subir una foto para verificaci√≥n"
}

STATUS 404 - NO ENCONTRADO:
{
    "success": false,
    "error": "No hay personas registradas con reconocimiento facial en la categor√≠a 'propietarios'",
    "debug": {
        "personas_filtradas": 14,
        "reconocimientos_totales": 10,
        "filtro_aplicado": "propietarios"
    }
}

STATUS 500 - ERROR SERVIDOR:
{
    "success": false,
    "error": "Error procesando verificaci√≥n facial: mensaje_error"
}

================================================================================
üíª C√ìDIGO JAVASCRIPT PARA FRONTEND
================================================================================

1. HTML B√ÅSICO DEL PANEL:
--------------------------

<div id="panel-reconocimiento">
    <h3>üîç Verificaci√≥n Facial</h3>
    
    <!-- Captura de foto -->
    <div class="seccion-foto">
        <input type="file" id="fotoInput" accept="image/*" capture="camera">
        <button onclick="capturarFoto()">üì∑ Capturar Foto</button>
        <img id="previewFoto" style="max-width: 300px; display: none;">
    </div>
    
    <!-- Configuraci√≥n -->
    <div class="seccion-config">
        <label>
            Umbral de Confianza:
            <select id="umbralSelect">
                <option value="60.0">60% - Flexible</option>
                <option value="70.0" selected>70% - Recomendado</option>
                <option value="80.0">80% - Estricto</option>
                <option value="90.0">90% - Muy estricto</option>
            </select>
        </label>
        
        <label>
            Buscar en:
            <select id="buscarEnSelect">
                <option value="todos">Todos los residentes</option>
                <option value="propietarios" selected>Solo propietarios</option>
                <option value="inquilinos">Solo inquilinos</option>
            </select>
        </label>
        
        <label>
            <input type="checkbox" id="usarIAReal" checked>
            Usar IA Real (m√°s preciso)
        </label>
    </div>
    
    <!-- Bot√≥n de verificaci√≥n -->
    <button id="btnVerificar" onclick="verificarIdentidad()">
        ü§ñ Verificar Identidad
    </button>
    
    <!-- Resultado -->
    <div id="resultado" class="resultado-oculto"></div>
    
    <!-- Loading -->
    <div id="loading" class="loading-oculto">
        <p>üîÑ Procesando reconocimiento facial...</p>
    </div>
</div>

2. CSS B√ÅSICO:
--------------

.resultado-oculto { display: none; }
.loading-oculto { display: none; }
.resultado-exito { background: #d4edda; border: 1px solid #c3e6cb; padding: 15px; border-radius: 5px; color: #155724; }
.resultado-error { background: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; border-radius: 5px; color: #721c24; }
.loading-visible { display: block; text-align: center; }

3. JAVASCRIPT PRINCIPAL:
------------------------

// URL base del API
const API_BASE = 'http://127.0.0.1:8000';  // Cambiar en producci√≥n

/**
 * Funci√≥n principal para verificar identidad facial
 */
async function verificarIdentidad() {
    const fotoInput = document.getElementById('fotoInput');
    const umbral = document.getElementById('umbralSelect').value;
    const buscarEn = document.getElementById('buscarEnSelect').value;
    const usarIA = document.getElementById('usarIAReal').checked;
    const resultadoDiv = document.getElementById('resultado');
    const loadingDiv = document.getElementById('loading');
    const btnVerificar = document.getElementById('btnVerificar');
    
    // Validaciones
    if (!fotoInput.files || !fotoInput.files[0]) {
        mostrarError('Por favor selecciona una foto primero');
        return;
    }
    
    const archivo = fotoInput.files[0];
    
    // Validar tipo de archivo
    if (!archivo.type.startsWith('image/')) {
        mostrarError('Por favor selecciona un archivo de imagen v√°lido (JPEG/PNG)');
        return;
    }
    
    // Validar tama√±o (m√°ximo 5MB)
    if (archivo.size > 5 * 1024 * 1024) {
        mostrarError('La imagen es muy grande. M√°ximo 5MB permitidos');
        return;
    }
    
    try {
        // Mostrar loading
        mostrarLoading(true);
        btnVerificar.disabled = true;
        
        // Preparar FormData
        const formData = new FormData();
        formData.append('foto_verificacion', archivo);
        formData.append('umbral_confianza', umbral);
        formData.append('buscar_en', buscarEn);
        formData.append('usar_ia_real', usarIA ? 'true' : 'false');
        
        console.log('Enviando solicitud de verificaci√≥n facial...');
        console.log('Par√°metros:', {
            umbral_confianza: umbral,
            buscar_en: buscarEn,
            usar_ia_real: usarIA,
            archivo_size: archivo.size
        });
        
        // Realizar petici√≥n
        const response = await fetch(`${API_BASE}/api/seguridad/verificacion-tiempo-real/`, {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        console.log('Respuesta del servidor:', data);
        
        if (response.ok && data.success) {
            // √âxito - persona identificada o no identificada
            procesarRespuestaExitosa(data);
        } else {
            // Error del servidor
            mostrarError(data.error || `Error del servidor: ${response.status}`);
        }
        
    } catch (error) {
        console.error('Error en verificaci√≥n facial:', error);
        mostrarError(`Error de conexi√≥n: ${error.message}`);
    } finally {
        // Ocultar loading
        mostrarLoading(false);
        btnVerificar.disabled = false;
    }
}

/**
 * Procesa respuesta exitosa del servidor
 */
function procesarRespuestaExitosa(data) {
    const verificacion = data.verificacion;
    const estadisticas = data.estadisticas;
    
    if (verificacion.resultado === 'ACEPTADO') {
        // ACCESO AUTORIZADO
        const persona = verificacion.persona_identificada;
        
        mostrarExito(`
            <h4>‚úÖ ACCESO AUTORIZADO</h4>
            <div class="info-persona">
                <p><strong>Nombre:</strong> ${persona.nombre_completo}</p>
                <p><strong>Documento:</strong> ${persona.documento}</p>
                <p><strong>Unidad:</strong> ${persona.unidad}</p>
                <p><strong>Tipo:</strong> ${persona.tipo_residente}</p>
                <p><strong>Confianza:</strong> ${verificacion.confianza.toFixed(1)}%</p>
            </div>
            <div class="estadisticas">
                <small>
                    Comparaciones: ${estadisticas.total_comparaciones} | 
                    Tiempo: ${estadisticas.tiempo_procesamiento_ms.toFixed(0)}ms
                </small>
            </div>
        `);
        
        // Registrar acceso (opcional)
        registrarAccesoExitoso(persona);
        
        // Sonido de √©xito (opcional)
        reproducirSonido('exito');
        
    } else {
        // ACCESO DENEGADO
        mostrarError(`
            <h4>‚ùå ACCESO DENEGADO</h4>
            <p>No se pudo identificar a la persona en el sistema.</p>
            <div class="estadisticas">
                <p><strong>Mejor coincidencia:</strong> ${verificacion.confianza.toFixed(1)}%</p>
                <p><strong>Umbral requerido:</strong> ${verificacion.umbral_usado}%</p>
                <small>
                    Se compar√≥ con ${estadisticas.total_comparaciones} personas registradas
                </small>
            </div>
        `);
        
        // Registrar intento fallido (opcional)
        registrarAccesoDenegado();
        
        // Sonido de error (opcional)
        reproducirSonido('error');
    }
}

/**
 * Funciones auxiliares
 */
function mostrarExito(mensaje) {
    const resultadoDiv = document.getElementById('resultado');
    resultadoDiv.className = 'resultado-exito';
    resultadoDiv.innerHTML = mensaje;
    resultadoDiv.style.display = 'block';
}

function mostrarError(mensaje) {
    const resultadoDiv = document.getElementById('resultado');
    resultadoDiv.className = 'resultado-error';
    resultadoDiv.innerHTML = typeof mensaje === 'string' ? `<p>${mensaje}</p>` : mensaje;
    resultadoDiv.style.display = 'block';
}

function mostrarLoading(visible) {
    const loadingDiv = document.getElementById('loading');
    loadingDiv.className = visible ? 'loading-visible' : 'loading-oculto';
}

function capturarFoto() {
    const input = document.getElementById('fotoInput');
    input.click();
    
    // Preview de la foto
    input.onchange = function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const img = document.getElementById('previewFoto');
                img.src = e.target.result;
                img.style.display = 'block';
            };
            reader.readAsDataURL(file);
        }
    };
}

// Funciones opcionales
function registrarAccesoExitoso(persona) {
    // Enviar log al servidor, actualizar historial, etc.
    console.log('Acceso autorizado para:', persona.nombre_completo);
}

function registrarAccesoDenegado() {
    // Registrar intento fallido para auditor√≠a
    console.log('Acceso denegado - persona no identificada');
}

function reproducirSonido(tipo) {
    // Reproducir sonido de √©xito o error
    if (tipo === 'exito') {
        // new Audio('/static/sounds/exito.mp3').play();
    } else {
        // new Audio('/static/sounds/error.mp3').play();
    }
}

4. INTEGRACI√ìN AVANZADA (OPCIONAL):
-----------------------------------

// Auto-verificaci√≥n cada X segundos con c√°mara web
function iniciarVerificacionContinua() {
    // Implementar captura autom√°tica desde webcam
    navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
            // Procesar stream de video
        });
}

// Hist√≥rico de verificaciones
function obtenerHistoricoVerificaciones() {
    fetch(`${API_BASE}/api/seguridad/historial-verificaciones/`)
        .then(response => response.json())
        .then(data => {
            // Mostrar historial en panel
        });
}

================================================================================
üéØ CASOS DE USO RECOMENDADOS
================================================================================

1. MODO DESARROLLO:
   - usar_ia_real: false
   - umbral_confianza: 70.0
   - Respuesta r√°pida para testing

2. MODO PRODUCCI√ìN:
   - usar_ia_real: true  
   - umbral_confianza: 70.0-80.0
   - Reconocimiento real con OpenCV

3. MODO ESTRICTO:
   - usar_ia_real: true
   - umbral_confianza: 85.0+
   - M√°xima seguridad

================================================================================
‚ö†Ô∏è CONSIDERACIONES IMPORTANTES
================================================================================

1. SEGURIDAD:
   - Reactivar autenticaci√≥n en producci√≥n
   - Validar archivos en frontend Y backend
   - Implementar rate limiting

2. PERFORMANCE:
   - IA real toma m√°s tiempo (1-3 segundos)
   - Simulaci√≥n es instant√°nea (<100ms)
   - Optimizar tama√±o de im√°genes

3. UX:
   - Mostrar loading durante procesamiento
   - Feedback claro de √©xito/error
   - Preview de foto antes de enviar

4. DATOS:
   - Sistema funciona con 10 personas registradas
   - Luis tiene 5 fotos (mejor precisi√≥n)
   - M√∫ltiples fotos mejoran reconocimiento

================================================================================
üöÄ TESTING R√ÅPIDO
================================================================================

Abrir consola del navegador y ejecutar:

fetch('http://127.0.0.1:8000/api/seguridad/verificacion-tiempo-real/', {
    method: 'POST',
    body: (() => {
        const fd = new FormData();
        fd.append('umbral_confianza', '70.0');
        fd.append('buscar_en', 'propietarios');
        fd.append('usar_ia_real', 'false');
        // Falta foto - dar√° error esperado
        return fd;
    })()
}).then(r => r.json()).then(console.log);

================================================================================
üìû SOPORTE
================================================================================

Si hay problemas:
1. Verificar que Django server est√© corriendo (python manage.py runserver)
2. Revisar logs del servidor para errores
3. Validar que las fotos sean JPEG/PNG v√°lidas
4. Confirmar que hay personas con reconocimiento facial en BD

¬°LISTO PARA IMPLEMENTAR! üéâ