# GU√çA COMPLETA: GESTI√ìN DE USUARIOS Y TRANSFERENCIAS PARA FRONTEND
# ================================================================

## üìã ENDPOINTS DISPONIBLES PARA EL ADMIN

### üîê 1. AUTENTICACI√ìN
```
POST /api/authz/login/
Body: {
  "email": "admin@condominio.com",
  "password": "admin123"
}

Response: {
  "access": "JWT_TOKEN",
  "refresh": "REFRESH_TOKEN",
  "user": { ... },
  "roles": [{"id": 1, "nombre": "Administrador"}],
  "primary_role": "Administrador"
}
```

### üë• 2. GESTI√ìN DE USUARIOS
```
# Listar todos los usuarios
GET /api/authz/usuarios/
Headers: Authorization: Bearer JWT_TOKEN

# Obtener usuario espec√≠fico
GET /api/authz/usuarios/{user_id}/
Headers: Authorization: Bearer JWT_TOKEN

# Actualizar usuario (incluyendo roles)
PUT /api/authz/usuarios/{user_id}/
Headers: Authorization: Bearer JWT_TOKEN
Body: {
  "email": "usuario@email.com",
  "estado": "ACTIVO",
  "roles": [3, 4]  // IDs de roles
}

# Actualizar parcialmente
PATCH /api/authz/usuarios/{user_id}/
Headers: Authorization: Bearer JWT_TOKEN
Body: {
  "roles": [3]  // Solo cambiar roles
}
```

### üè† 3. GESTI√ìN DE PERSONAS Y TIPOS
```
# Listar personas
GET /api/viviendas/personas/
Headers: Authorization: Bearer JWT_TOKEN

# Cambiar tipo de persona
PUT /api/viviendas/personas/{persona_id}/cambiar-tipo/
Headers: Authorization: Bearer JWT_TOKEN
Body: {
  "nuevo_tipo": "propietario"  // o "inquilino"
}
```

### üîÑ 4. TRANSFERENCIA DE PROPIEDADES
```
# Transferir propiedad espec√≠fica
POST /api/viviendas/viviendas/{vivienda_id}/transferir-propiedad/
Headers: Authorization: Bearer JWT_TOKEN
Body: {
  "nuevo_propietario_id": 123,
  "motivo_transferencia": "Venta de propiedad"
}
```

### üìä 5. ROLES DISPONIBLES
```
# Listar todos los roles
GET /api/authz/roles/
Headers: Authorization: Bearer JWT_TOKEN

Response: [
  {"id": 1, "nombre": "Administrador"},
  {"id": 2, "nombre": "Seguridad"},
  {"id": 3, "nombre": "Propietario"},
  {"id": 4, "nombre": "Inquilino"}
]
```

## üéØ CASOS DE USO PARA EL FRONTEND

### CASO 1: ADMIN CAMBIA MANUALMENTE EL ROL DE UN USUARIO
```javascript
// Ejemplo: Cambiar inquilino a propietario manualmente
async function cambiarRolUsuario(userId, nuevoRolId) {
  const response = await fetch(`/api/authz/usuarios/${userId}/`, {
    method: 'PATCH',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      roles: [nuevoRolId]
    })
  });
  
  if (response.ok) {
    alert('Rol actualizado exitosamente');
    // ‚úÖ AUTOM√ÅTICO: El sistema sincronizar√° tipo_persona
  }
}
```

### CASO 2: TRANSFERENCIA DE PROPIEDAD COMPLETA
```javascript
// Ejemplo: Propietario vende casa a inquilino
async function transferirPropiedad(viviendaId, nuevoPropietarioId, motivo) {
  const response = await fetch(`/api/viviendas/viviendas/${viviendaId}/transferir-propiedad/`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      nuevo_propietario_id: nuevoPropietarioId,
      motivo_transferencia: motivo
    })
  });
  
  if (response.ok) {
    alert('Propiedad transferida exitosamente');
    // ‚úÖ AUTOM√ÅTICO: Roles se actualizan autom√°ticamente
    // ‚úÖ Ex-propietario ‚Üí inquilino
    // ‚úÖ Ex-inquilino ‚Üí propietario
  }
}
```

### CASO 3: CAMBIO DIRECTO DE TIPO DE PERSONA
```javascript
// Ejemplo: Admin cambia tipo de persona directamente
async function cambiarTipoPersona(personaId, nuevoTipo) {
  const response = await fetch(`/api/viviendas/personas/${personaId}/cambiar-tipo/`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      nuevo_tipo: nuevoTipo  // "propietario" o "inquilino"
    })
  });
  
  if (response.ok) {
    alert(`Tipo cambiado a ${nuevoTipo} exitosamente`);
    // ‚úÖ AUTOM√ÅTICO: Roles del usuario se sincronizan
  }
}
```

## üõ°Ô∏è SINCRONIZACI√ìN AUTOM√ÅTICA

### ‚ö° QUE HACE EL BACKEND AUTOM√ÅTICAMENTE:

1. **Cuando cambias roles de usuario:**
   - ‚úÖ Se actualiza tipo_persona autom√°ticamente
   - ‚úÖ Inquilino ‚Üí Propietario sincroniza tipo_persona = "propietario"

2. **Cuando cambias tipo_persona:**
   - ‚úÖ Se actualizan roles autom√°ticamente
   - ‚úÖ tipo_persona = "propietario" ‚Üí rol "Propietario"

3. **Cuando transfieres propiedad:**
   - ‚úÖ Se actualizan AMBOS usuarios autom√°ticamente
   - ‚úÖ Ex-propietario: tipo="inquilino", rol="Inquilino"
   - ‚úÖ Ex-inquilino: tipo="propietario", rol="Propietario"

## üé® COMPONENTES REACT SUGERIDOS

### 1. PANEL DE GESTI√ìN DE USUARIOS
```jsx
function GestionUsuarios() {
  const [usuarios, setUsuarios] = useState([]);
  const [roles, setRoles] = useState([]);
  
  // Cargar datos
  useEffect(() => {
    cargarUsuarios();
    cargarRoles();
  }, []);
  
  const cambiarRol = async (userId, nuevoRolId) => {
    await cambiarRolUsuario(userId, nuevoRolId);
    cargarUsuarios(); // Recargar lista
  };
  
  return (
    <div>
      <h2>Gesti√≥n de Usuarios</h2>
      {usuarios.map(usuario => (
        <div key={usuario.id}>
          <span>{usuario.email}</span>
          <span>Tipo: {usuario.persona?.tipo_persona}</span>
          <span>Roles: {usuario.roles.map(r => r.nombre).join(', ')}</span>
          <select onChange={(e) => cambiarRol(usuario.id, e.target.value)}>
            {roles.map(rol => (
              <option key={rol.id} value={rol.id}>{rol.nombre}</option>
            ))}
          </select>
        </div>
      ))}
    </div>
  );
}
```

### 2. PANEL DE TRANSFERENCIA DE PROPIEDADES
```jsx
function TransferenciaPropiedades() {
  const [viviendas, setViviendas] = useState([]);
  const [personas, setPersonas] = useState([]);
  
  const transferir = async (viviendaId, nuevoPropietarioId) => {
    await transferirPropiedad(
      viviendaId, 
      nuevoPropietarioId, 
      "Transferencia administrativa"
    );
    cargarViviendas(); // Recargar
  };
  
  return (
    <div>
      <h2>Transferir Propiedades</h2>
      {viviendas.map(vivienda => (
        <div key={vivienda.id}>
          <span>Vivienda: {vivienda.numero}</span>
          <span>Propietario: {vivienda.propietario?.nombre_completo}</span>
          <select onChange={(e) => transferir(vivienda.id, e.target.value)}>
            <option value="">Transferir a...</option>
            {personas.map(persona => (
              <option key={persona.id} value={persona.id}>
                {persona.nombre_completo}
              </option>
            ))}
          </select>
        </div>
      ))}
    </div>
  );
}
```

## üîç VERIFICACI√ìN EN TIEMPO REAL

### COMPROBAR SI LA SINCRONIZACI√ìN FUNCIONA:
```javascript
// Despu√©s de cualquier cambio, verificar estado
async function verificarSincronizacion(userId) {
  const response = await fetch(`/api/authz/usuarios/${userId}/`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  
  const usuario = await response.json();
  
  console.log('Estado actual:');
  console.log('- Tipo persona:', usuario.persona?.tipo_persona);
  console.log('- Roles:', usuario.roles.map(r => r.nombre));
  
  // Verificar coherencia
  const tipoPersona = usuario.persona?.tipo_persona;
  const roles = usuario.roles.map(r => r.nombre);
  
  if (tipoPersona === 'propietario' && roles.includes('Propietario')) {
    console.log('‚úÖ Sincronizado correctamente');
  } else if (tipoPersona === 'inquilino' && roles.includes('Inquilino')) {
    console.log('‚úÖ Sincronizado correctamente');
  } else {
    console.log('‚ùå Posible desincronizaci√≥n');
  }
}
```

## üö® MANEJO DE ERRORES

### ERRORES COMUNES Y SOLUCIONES:
```javascript
async function manejarCambioRol(userId, nuevoRolId) {
  try {
    const response = await cambiarRolUsuario(userId, nuevoRolId);
    
    if (!response.ok) {
      if (response.status === 403) {
        alert('No tienes permisos para realizar esta acci√≥n');
      } else if (response.status === 404) {
        alert('Usuario no encontrado');
      } else {
        alert('Error al cambiar rol');
      }
      return;
    }
    
    alert('Rol cambiado exitosamente');
    
  } catch (error) {
    console.error('Error:', error);
    alert('Error de conexi√≥n');
  }
}
```

## üéØ FLUJO COMPLETO RECOMENDADO

### PARA TRANSFERENCIA DE PROPIEDAD:
1. **Admin selecciona vivienda** ‚Üí GET /api/viviendas/viviendas/
2. **Admin selecciona nuevo propietario** ‚Üí GET /api/viviendas/personas/
3. **Admin confirma transferencia** ‚Üí POST /api/viviendas/viviendas/{id}/transferir-propiedad/
4. **Sistema actualiza autom√°ticamente:**
   - ‚úÖ Propietario anterior ‚Üí tipo_persona="inquilino", rol="Inquilino"
   - ‚úÖ Nuevo propietario ‚Üí tipo_persona="propietario", rol="Propietario"
5. **Frontend muestra confirmaci√≥n** y actualiza listas

### PARA CAMBIO MANUAL DE ROLES:
1. **Admin ve lista de usuarios** ‚Üí GET /api/authz/usuarios/
2. **Admin cambia rol** ‚Üí PATCH /api/authz/usuarios/{id}/
3. **Sistema sincroniza tipo_persona autom√°ticamente**
4. **Frontend verifica resultado** ‚Üí GET /api/authz/usuarios/{id}/

## ‚úÖ VERIFICACI√ìN FINAL

El sistema garantiza que:
- ‚úÖ Cambios de roles actualizan tipo_persona
- ‚úÖ Cambios de tipo_persona actualizan roles
- ‚úÖ Transferencias actualizan ambos usuarios
- ‚úÖ Solo usuarios espec√≠ficos se ven afectados
- ‚úÖ Login redirige al panel correcto

¬°El frontend solo necesita llamar los endpoints, la sincronizaci√≥n es autom√°tica!