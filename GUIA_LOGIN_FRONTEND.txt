======================================================================
                    GUÍA COMPLETA DE LOGIN PARA FRONTEND
                           Sistema Facial Recognition
======================================================================

🔒 ENDPOINTS DE AUTENTICACIÓN DISPONIBLES
==========================================

BASE URL: http://localhost:8000
(Ajustar según tu configuración de servidor)

1. LOGIN PRINCIPAL - Sistema JWT Custom
   URL: /api/authz/login/
   Método: POST
   Headers: Content-Type: application/json

2. LOGIN ALTERNATIVO - Sistema SimpleJWT
   URL: /api/auth/login/
   Método: POST
   Headers: Content-Type: application/json

3. REFRESH TOKEN
   URL: /api/authz/refresh/
   Método: POST
   Headers: Content-Type: application/json

======================================================================
💻 PAYLOADS DE EJEMPLO PARA TESTING
======================================================================

1. PAYLOAD DE LOGIN (Administrador)
----------------------------------
{
  "email": "admin@facial.com",
  "password": "admin123"
}

2. PAYLOAD DE LOGIN (Seguridad)
-------------------------------
{
  "email": "seguridad@facial.com",
  "password": "seguridad123"
}

3. PAYLOAD DE LOGIN (Propietario)
---------------------------------
{
  "email": "maria.gonzalez@facial.com",
  "password": "propietario123"
}

4. PAYLOAD DE LOGIN (Inquilino)
-------------------------------
{
  "email": "carlos.rodriguez@facial.com",
  "password": "inquilino123"
}

======================================================================
📋 RESPUESTAS ESPERADAS
======================================================================

✅ LOGIN EXITOSO (Status: 200 OK)
----------------------------------
{
  "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
}

❌ LOGIN FALLIDO (Status: 401 Unauthorized)
--------------------------------------------
{
  "detail": "Credenciales inválidas"
}

🔄 REFRESH TOKEN (Status: 200 OK)
----------------------------------
PAYLOAD:
{
  "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
}

RESPUESTA:
{
  "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
}

======================================================================
🚀 CÓDIGO DE EJEMPLO JAVASCRIPT/TYPESCRIPT
======================================================================

// Función de Login
async function login(email, password) {
  try {
    const response = await fetch('http://localhost:8000/api/authz/login/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: email,
        password: password
      })
    });

    if (response.ok) {
      const data = await response.json();
      
      // Guardar tokens en localStorage
      localStorage.setItem('access_token', data.access);
      localStorage.setItem('refresh_token', data.refresh);
      
      console.log('Login exitoso:', data);
      return { success: true, data: data };
    } else {
      const errorData = await response.json();
      console.error('Error de login:', errorData);
      return { success: false, error: errorData.detail };
    }
  } catch (error) {
    console.error('Error de red:', error);
    return { success: false, error: 'Error de conexión' };
  }
}

// Función para hacer requests autenticados
async function authenticatedRequest(url, options = {}) {
  const token = localStorage.getItem('access_token');
  
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers
  };
  
  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }
  
  try {
    const response = await fetch(url, {
      ...options,
      headers: headers
    });
    
    // Si el token expiró (401), intentar renovar
    if (response.status === 401) {
      const refreshSuccess = await refreshToken();
      if (refreshSuccess) {
        // Reintentar con el nuevo token
        headers['Authorization'] = `Bearer ${localStorage.getItem('access_token')}`;
        return await fetch(url, { ...options, headers: headers });
      } else {
        // Redirect a login
        redirectToLogin();
        return null;
      }
    }
    
    return response;
  } catch (error) {
    console.error('Error en request autenticado:', error);
    throw error;
  }
}

// Función para renovar token
async function refreshToken() {
  const refreshToken = localStorage.getItem('refresh_token');
  
  if (!refreshToken) {
    return false;
  }
  
  try {
    const response = await fetch('http://localhost:8000/api/authz/refresh/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        refresh: refreshToken
      })
    });
    
    if (response.ok) {
      const data = await response.json();
      localStorage.setItem('access_token', data.access);
      return true;
    } else {
      // Refresh token inválido, eliminar tokens
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      return false;
    }
  } catch (error) {
    console.error('Error renovando token:', error);
    return false;
  }
}

// Función para logout
function logout() {
  localStorage.removeItem('access_token');
  localStorage.removeItem('refresh_token');
  redirectToLogin();
}

// Función para verificar si el usuario está autenticado
function isAuthenticated() {
  return localStorage.getItem('access_token') !== null;
}

// Función para obtener información del usuario del token
function getUserFromToken() {
  const token = localStorage.getItem('access_token');
  if (!token) return null;
  
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    return {
      user_id: payload.user_id,
      email: payload.email,
      exp: payload.exp
    };
  } catch (error) {
    console.error('Error decodificando token:', error);
    return null;
  }
}

======================================================================
🌐 EJEMPLO CON AXIOS
======================================================================

import axios from 'axios';

// Configurar base URL
const API_BASE_URL = 'http://localhost:8000';

// Crear instancia de axios
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para agregar token automáticamente
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('access_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Interceptor para manejar respuestas y renovar token
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      const refreshToken = localStorage.getItem('refresh_token');
      if (refreshToken) {
        try {
          const response = await axios.post(`${API_BASE_URL}/api/authz/refresh/`, {
            refresh: refreshToken
          });
          
          localStorage.setItem('access_token', response.data.access);
          originalRequest.headers.Authorization = `Bearer ${response.data.access}`;
          
          return api(originalRequest);
        } catch (refreshError) {
          localStorage.removeItem('access_token');
          localStorage.removeItem('refresh_token');
          window.location.href = '/login';
        }
      }
    }
    
    return Promise.reject(error);
  }
);

// Función de login con Axios
export const loginWithAxios = async (email, password) => {
  try {
    const response = await api.post('/api/authz/login/', {
      email,
      password
    });
    
    localStorage.setItem('access_token', response.data.access);
    localStorage.setItem('refresh_token', response.data.refresh);
    
    return { success: true, data: response.data };
  } catch (error) {
    return { 
      success: false, 
      error: error.response?.data?.detail || 'Error de conexión' 
    };
  }
};

======================================================================
⚛️ EJEMPLO CON REACT HOOKS
======================================================================

import { useState, useEffect, createContext, useContext } from 'react';

// Context para autenticación
const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth debe usarse dentro de AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const token = localStorage.getItem('access_token');
    if (token) {
      // Verificar si el token no ha expirado
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        if (payload.exp * 1000 > Date.now()) {
          setUser({
            id: payload.user_id,
            email: payload.email
          });
        } else {
          localStorage.removeItem('access_token');
          localStorage.removeItem('refresh_token');
        }
      } catch (error) {
        localStorage.removeItem('access_token');
        localStorage.removeItem('refresh_token');
      }
    }
    setLoading(false);
  }, []);

  const login = async (email, password) => {
    try {
      const response = await fetch('http://localhost:8000/api/authz/login/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password })
      });

      if (response.ok) {
        const data = await response.json();
        localStorage.setItem('access_token', data.access);
        localStorage.setItem('refresh_token', data.refresh);
        
        const payload = JSON.parse(atob(data.access.split('.')[1]));
        setUser({
          id: payload.user_id,
          email: payload.email
        });
        
        return { success: true };
      } else {
        const errorData = await response.json();
        return { success: false, error: errorData.detail };
      }
    } catch (error) {
      return { success: false, error: 'Error de conexión' };
    }
  };

  const logout = () => {
    localStorage.removeItem('access_token');
    localStorage.removeItem('refresh_token');
    setUser(null);
  };

  const value = {
    user,
    login,
    logout,
    loading,
    isAuthenticated: !!user
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// Componente de Login
export const LoginForm = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    const result = await login(email, password);
    
    if (!result.success) {
      setError(result.error);
    }
    
    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>Email:</label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
      </div>
      <div>
        <label>Password:</label>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
      </div>
      {error && <div style={{color: 'red'}}>{error}</div>}
      <button type="submit" disabled={loading}>
        {loading ? 'Iniciando sesión...' : 'Iniciar Sesión'}
      </button>
    </form>
  );
};

======================================================================
🔧 CONFIGURACIÓN DE HEADERS PARA REQUESTS AUTENTICADOS
======================================================================

Todos los requests que requieran autenticación deben incluir:

Headers:
Authorization: Bearer [access_token]
Content-Type: application/json

Ejemplo:
{
  "Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "Content-Type": "application/json"
}

======================================================================
🚨 MANEJO DE ERRORES COMUNES
======================================================================

1. ERROR 401 - Token expirado
   - Intentar renovar token con refresh_token
   - Si falla, redirect a login

2. ERROR 401 - Credenciales inválidas
   - Mostrar mensaje de error al usuario
   - Limpiar campos de formulario

3. ERROR 400 - Datos faltantes
   - Validar campos requeridos
   - Mostrar mensaje específico

4. ERROR 500 - Error del servidor
   - Mostrar mensaje genérico
   - Reintentar después de unos segundos

======================================================================
📱 EJEMPLO PARA POSTMAN/INSOMNIA
======================================================================

1. CREAR REQUEST DE LOGIN
   - Método: POST
   - URL: http://localhost:8000/api/authz/login/
   - Headers: Content-Type: application/json
   - Body (raw JSON):
     {
       "email": "admin@facial.com",
       "password": "admin123"
     }

2. COPIAR ACCESS TOKEN DE LA RESPUESTA

3. CREAR REQUEST AUTENTICADO
   - Método: GET/POST (según endpoint)
   - URL: http://localhost:8000/api/[endpoint]
   - Headers: 
     * Authorization: Bearer [pegar_access_token_aquí]
     * Content-Type: application/json

======================================================================
🔒 ROLES Y PERMISOS DISPONIBLES
======================================================================

ADMINISTRADOR (admin@facial.com)
- Acceso completo al sistema
- Gestión de usuarios
- Aprobación de solicitudes
- Configuración del sistema

SEGURIDAD (seguridad@facial.com)
- Gestión de acceso
- Registro de ingresos
- Control de visitantes
- Reconocimiento facial

PROPIETARIO (maria.gonzalez@facial.com)
- Gestión de familiares
- Registro de inquilinos
- Autorización de visitas
- Consulta de expensas

INQUILINO (carlos.rodriguez@facial.com)
- Consulta de información personal
- Autorización de visitas (limitada)
- Consulta de expensas

======================================================================
⚠️ NOTAS IMPORTANTES
======================================================================

1. Los tokens JWT tienen un tiempo de expiración. Usar refresh token para renovar.

2. Almacenar tokens de forma segura:
   - localStorage: Para aplicaciones SPA simples
   - httpOnly cookies: Para mayor seguridad
   - sessionStorage: Para sesiones temporales

3. Implementar logout adecuado limpiando todos los tokens.

4. Validar siempre el estado de autenticación antes de hacer requests.

5. Manejar correctamente los errores de red y servidor.

6. El sistema acepta tanto /api/authz/login/ como /api/auth/login/ 
   (se recomienda usar /api/authz/login/)

======================================================================
📞 SOPORTE Y DEBUGGING
======================================================================

Si tienes problemas:

1. Verificar que el servidor esté corriendo en http://localhost:8000
2. Comprobar que los usuarios de prueba existan en la base de datos
3. Revisar logs del servidor para errores específicos
4. Usar herramientas de desarrollo del navegador para revisar requests
5. Verificar que los headers estén correctamente configurados

Usuarios de prueba disponibles:
- admin@facial.com (admin123) - Administrador
- seguridad@facial.com (seguridad123) - Seguridad  
- maria.gonzalez@facial.com (propietario123) - Propietario
- carlos.rodriguez@facial.com (inquilino123) - Inquilino

======================================================================