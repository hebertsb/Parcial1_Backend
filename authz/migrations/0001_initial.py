# Generated by Django 5.2.6 on 2025-09-23 06:53

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Persona',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('apellido', models.CharField(max_length=100)),
                ('documento_identidad', models.CharField(max_length=20, unique=True)),
                ('telefono', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('fecha_nacimiento', models.DateField(blank=True, null=True)),
                ('genero', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino'), ('O', 'Otro')], max_length=1)),
                ('pais', models.CharField(blank=True, max_length=50)),
                ('tipo_persona', models.CharField(choices=[('administrador', 'Administrador'), ('seguridad', 'Seguridad'), ('propietario', 'Propietario'), ('inquilino', 'Inquilino'), ('cliente', 'Cliente')], default='cliente', max_length=20)),
                ('direccion', models.TextField(blank=True)),
                ('foto_perfil', models.ImageField(blank=True, null=True, upload_to='fotos_perfil/')),
                ('encoding_facial', models.JSONField(blank=True, help_text='Codificación facial para reconocimiento', null=True)),
                ('reconocimiento_facial_activo', models.BooleanField(default=False)),
                ('activo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Persona',
                'verbose_name_plural': 'Personas',
                'db_table': 'authz_persona',
            },
        ),
        migrations.CreateModel(
            name='Rol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50, unique=True)),
                ('descripcion', models.TextField(blank=True, null=True)),
                ('activo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Rol',
                'verbose_name_plural': 'Roles',
                'db_table': 'authz_rol',
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('estado', models.CharField(choices=[('ACTIVO', 'Activo'), ('INACTIVO', 'Inactivo'), ('SUSPENDIDO', 'Suspendido'), ('BLOQUEADO', 'Bloqueado')], default='ACTIVO', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('persona', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='usuario', to='authz.persona')),
                ('roles', models.ManyToManyField(blank=True, related_name='usuarios', to='authz.rol')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'authz_usuario',
            },
        ),
        migrations.CreateModel(
            name='SolicitudRegistroPropietario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombres', models.CharField(max_length=100)),
                ('apellidos', models.CharField(max_length=100)),
                ('documento_identidad', models.CharField(max_length=20)),
                ('fecha_nacimiento', models.DateField()),
                ('email', models.EmailField(max_length=254)),
                ('telefono', models.CharField(max_length=20)),
                ('numero_casa', models.CharField(help_text='Número de casa o departamento (debe existir en el sistema)', max_length=20)),
                ('estado', models.CharField(choices=[('PENDIENTE', 'Pendiente de Revisión'), ('EN_REVISION', 'En Revisión'), ('APROBADA', 'Aprobada'), ('RECHAZADA', 'Rechazada'), ('DOCUMENTOS_FALTANTES', 'Documentos Faltantes'), ('REQUIERE_ACLARACION', 'Requiere Aclaración')], default='PENDIENTE', max_length=25)),
                ('comentarios_admin', models.TextField(blank=True, help_text='Comentarios del administrador')),
                ('fecha_revision', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('revisado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='solicitudes_revisadas', to=settings.AUTH_USER_MODEL)),
                ('usuario_creado', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='solicitud_registro', to=settings.AUTH_USER_MODEL)),
                # ('vivienda_validada', models.ForeignKey(blank=True, help_text='Vivienda encontrada en el sistema', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.vivienda')),
            ],
            options={
                'verbose_name': 'Solicitud de Registro de Propietario',
                'verbose_name_plural': 'Solicitudes de Registro de Propietarios',
                'db_table': 'authz_solicitud_registro_propietario',
            },
        ),
        migrations.CreateModel(
            name='FamiliarPropietario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parentesco', models.CharField(choices=[('conyugue', 'Cónyuge'), ('hijo', 'Hijo/a'), ('padre', 'Padre/Madre'), ('hermano', 'Hermano/a'), ('abuelo', 'Abuelo/a'), ('nieto', 'Nieto/a'), ('tio', 'Tío/a'), ('sobrino', 'Sobrino/a'), ('primo', 'Primo/a'), ('cuñado', 'Cuñado/a'), ('yerno_nuera', 'Yerno/Nuera'), ('suegro', 'Suegro/a'), ('otro', 'Otro')], max_length=20)),
                ('parentesco_descripcion', models.CharField(blank=True, help_text="Descripción específica si es 'otro'", max_length=100)),
                ('autorizado_acceso', models.BooleanField(default=True, help_text='Si puede acceder al condominio sin autorización previa')),
                ('puede_autorizar_visitas', models.BooleanField(default=False, help_text='Si puede autorizar visitas en nombre del propietario')),
                ('observaciones', models.TextField(blank=True)),
                ('activo', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('propietario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='familiares', to=settings.AUTH_USER_MODEL)),
                ('persona', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='familiar_propietario', to='authz.persona')),
            ],
            options={
                'verbose_name': 'Familiar de Propietario',
                'verbose_name_plural': 'Familiares de Propietarios',
                'db_table': 'authz_familiar_propietario',
                'unique_together': {('propietario', 'persona')},
            },
        ),
        migrations.CreateModel(
            name='RelacionesPropietarioInquilino',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_inicio', models.DateField()),
                ('fecha_fin', models.DateField(blank=True, null=True)),
                ('activo', models.BooleanField(default=True)),
                ('monto_alquiler', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('observaciones', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inquilino', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='propiedades_como_inquilino', to=settings.AUTH_USER_MODEL)),
                ('propietario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='propiedades_como_propietario', to=settings.AUTH_USER_MODEL)),
                # ('vivienda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relaciones_propietario_inquilino', to='core.vivienda')),
            ],
            options={
                'verbose_name': 'Relación Propietario-Inquilino',
                'verbose_name_plural': 'Relaciones Propietario-Inquilino',
                'db_table': 'authz_relaciones_propietario_inquilino',
                'constraints': [models.UniqueConstraint(condition=models.Q(('activo', True)), fields=('propietario', 'inquilino'), name='unique_active_propietario_inquilino')],
            },
        ),
    ]
