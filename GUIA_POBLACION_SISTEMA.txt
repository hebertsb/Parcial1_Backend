# üìã GU√çA COMPLETA PARA POBLAR EL SISTEMA BACKEND PARCIAL 1
# Fecha: 23 de Septiembre, 2025
# Repositorio: backendParcial1 (luisrepo25)

================================================================================
üéØ √çNDICE
================================================================================
1. COMANDOS DE MANAGEMENT DE DJANGO
2. SECUENCIA RECOMENDADA PARA POBLAR EL SISTEMA
3. ENDPOINTS Y JSONSS PARA TESTING
4. RESUMEN DE DATOS GENERADOS

================================================================================
üìã 1. COMANDOS DE MANAGEMENT DE DJANGO DISPONIBLES
================================================================================

üîê AUTHZ (Sistema de Autenticaci√≥n y Propietarios)
--------------------------------------------------

1. CREAR ADMINISTRADOR
   python manage.py crear_admin --email admin@example.com --password admin123 --nombres Administrador --apellidos Sistema
   
   Prop√≥sito: Crea un usuario administrador con rol ADMIN
   Par√°metros obligatorios: --email, --password, --nombres, --apellidos

2. CARGAR USUARIOS DESDE JSON
   python manage.py cargar_usuarios
   
   Prop√≥sito: Carga usuarios desde el archivo authz/initial_users.json
   Requiere: Archivo JSON con estructura de usuarios

3. CREAR USUARIOS PARA SISTEMA FACIAL
   python manage.py crear_usuarios_facial
   
   Prop√≥sito: Crea roles, personas y usuarios espec√≠ficos para reconocimiento facial
   Crea autom√°ticamente: Roles Administrador, Seguridad, Propietario, Inquilino

4. CREAR SOLICITUDES DE PROPIETARIOS DE PRUEBA
   python manage.py crear_solicitudes_propietarios --cantidad 10
   
   Prop√≥sito: Genera solicitudes de registro de propietarios de prueba
   Par√°metro opcional: --cantidad (default: 5)

5. SETUP DATOS DE PRUEBA PARA REGISTRO
   python manage.py setup_registro_test --num-viviendas 20 --num-solicitudes 10
   
   Prop√≥sito: Crea viviendas y solicitudes de prueba completas
   Par√°metros opcionales:
   - --num-viviendas (default: 10)
   - --num-solicitudes (default: 5)

6. APROBAR SOLICITUD DESDE L√çNEA DE COMANDOS
   python manage.py aprobar_solicitud 1 --admin-user admin@example.com --observaciones "Aprobado desde comandos"
   
   Prop√≥sito: Aprueba una solicitud espec√≠fica por ID
   Par√°metros:
   - solicitud_id (obligatorio)
   - --admin-user (opcional)
   - --observaciones (opcional)

üè¢ CORE (Gesti√≥n de Viviendas y Propiedades)
--------------------------------------------

7. CREAR DATOS DE PRUEBA CU05
   python manage.py crear_datos_prueba_cu05
   
   Prop√≥sito: Crea datos completos de prueba para gesti√≥n de unidades habitacionales
   Incluye: Usuario admin, viviendas, personas y propiedades

üîç SEGURIDAD (Reconocimiento Facial)
------------------------------------

8. CREAR DATOS DE PRUEBA FACIAL
   python manage.py create_test_data
   
   Prop√≥sito: Crea copropietarios de prueba para sistema de reconocimiento facial
   Integra: Con usuarios del sistema authz

================================================================================
üéØ 2. SECUENCIA RECOMENDADA PARA POBLAR TODO EL SISTEMA
================================================================================

PASO 1: CONFIGURACI√ìN BASE
---------------------------
# 1. Aplicar migraciones
python manage.py migrate

# 2. Crear administrador principal
python manage.py crear_admin --email admin@condominio.com --password admin123 --nombres Admin --apellidos Sistema

PASO 2: DATOS DE VIVIENDAS Y PROPIEDADES
----------------------------------------
# 3. Crear datos base de viviendas y propiedades
python manage.py crear_datos_prueba_cu05

PASO 3: SISTEMA DE USUARIOS Y ROLES
------------------------------------
# 4. Crear usuarios para sistema facial
python manage.py crear_usuarios_facial

# 5. Configurar datos de registro de propietarios
python manage.py setup_registro_test --num-viviendas 15 --num-solicitudes 8

PASO 4: SOLICITUDES Y APROBACIONES
-----------------------------------
# 6. Crear solicitudes adicionales de prueba
python manage.py crear_solicitudes_propietarios --cantidad 5

# 7. Aprobar algunas solicitudes manualmente (opcional)
python manage.py aprobar_solicitud 1 --admin-user admin@condominio.com
python manage.py aprobar_solicitud 2 --admin-user admin@condominio.com

PASO 5: SISTEMA DE RECONOCIMIENTO FACIAL
-----------------------------------------
# 8. Crear datos de prueba para reconocimiento facial
python manage.py create_test_data

================================================================================
üìù 3. ENDPOINTS Y JSONS PARA TESTING
================================================================================

üîê AUTENTICACI√ìN Y AUTORIZACI√ìN
--------------------------------

LOGIN
URL: POST /api/authz/login/
JSON:
{
  "email": "usuario@example.com",
  "password": "contrase√±a123"
}

REFRESH TOKEN
URL: POST /api/authz/refresh/
JSON:
{
  "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
}

REGISTRO DE USUARIO GENERAL
URL: POST /api/authz/register/
JSON:
{
  "nombre": "Ana Gomez",
  "email": "ana@example.com",
  "password": "SecretPass123",
  "password_confirm": "SecretPass123",
  "telefono": "71111111"
}

üè† REGISTRO DE PROPIETARIOS
---------------------------

REGISTRO INICIAL DE PROPIETARIO
URL: POST /api/authz/propietarios/registro-inicial/
JSON:
{
  "primer_nombre": "Juan",
  "primer_apellido": "P√©rez",
  "cedula": "12345678",
  "fecha_nacimiento": "1985-06-15",
  "telefono": "71234567",
  "email": "juan.perez@example.com",
  "numero_casa": "A-101",
  "password": "MiPassword123",
  "confirm_password": "MiPassword123"
}

CREAR SOLICITUD DE REGISTRO (PROPIETARIO)
URL: POST /api/authz/propietarios/solicitudes/
JSON:
{
  "nombre": "Mar√≠a",
  "apellido": "Gonz√°lez", 
  "documento_identidad": "87654321",
  "fecha_nacimiento": "1990-03-20",
  "email": "maria.gonzalez@example.com",
  "telefono": "72345678",
  "numero_casa": "B-205",
  "comentarios": "Solicito ser registrada como propietaria"
}

APROBAR SOLICITUD (Administrador)
URL: POST /api/authz/propietarios/admin/solicitudes/{id}/aprobar/
JSON:
{
  "observaciones_aprobacion": "Solicitud aprobada - documentaci√≥n completa"
}

IMPORTANTE: ‚úÖ Al aprobar una solicitud:
- Se crea autom√°ticamente un Usuario asociado
- Se asigna el ROL DE PROPIETARIO autom√°ticamente  
- Se crea la relaci√≥n con la Vivienda
- Se actualiza el estado a 'APROBADA'
- Se registra la fecha y usuario que aprob√≥

RECHAZAR SOLICITUD (Administrador)
URL: POST /api/authz/propietarios/admin/solicitudes/{id}/rechazar/
JSON:
{
  "motivo_rechazo": "Documentaci√≥n incompleta",
  "comentarios_admin": "Falta comprobante de propiedad"
}

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ GESTI√ìN DE FAMILIARES (Panel Propietario)
--------------------------------------------------

REGISTRAR FAMILIAR
URL: POST /api/authz/propietarios/familiares/
Autenticaci√≥n: JWT Token requerido
JSON:
{
  "primer_nombre": "Carlos",
  "primer_apellido": "P√©rez",
  "documento_identidad": "11223344",
  "fecha_nacimiento": "2000-08-10",
  "telefono": "73456789",
  "email": "carlos.perez@example.com",
  "relacion_familiar": "hijo",
  "es_menor_edad": false,
  "documento_autorizacion": "base64_encoded_file_here"
}

üèòÔ∏è GESTI√ìN DE INQUILINOS (Panel Propietario)
---------------------------------------------

REGISTRAR INQUILINO
URL: POST /api/authz/propietarios/inquilinos/
Autenticaci√≥n: JWT Token requerido
JSON:
{
  "primer_nombre": "Ana",
  "primer_apellido": "Mart√≠nez", 
  "documento_identidad": "55667788",
  "fecha_nacimiento": "1988-12-05",
  "telefono": "74567890",
  "email": "ana.martinez@example.com",
  "fecha_inicio": "2025-01-01",
  "fecha_fin": "2025-12-31",
  "monto_alquiler": "1500.00",
  "observaciones": "Inquilino principal - contrato anual",
  "contrato_alquiler": "base64_encoded_file_here"
}

üè¢ GESTI√ìN DE VIVIENDAS
-----------------------

CREAR VIVIENDA
URL: POST /api/viviendas/viviendas/
JSON:
{
  "numero_casa": "C-301",
  "bloque": "C",
  "tipo_vivienda": "apartamento",
  "area_m2": 85.5,
  "numero_habitaciones": 3,
  "numero_banos": 2,
  "tiene_parqueadero": true,
  "piso": 3,
  "estado": "ocupado"
}

CREAR PROPIEDAD
URL: POST /api/viviendas/propiedades/
JSON:
{
  "vivienda": 1,
  "persona": 1,
  "tipo_relacion": "propietario",
  "fecha_inicio": "2024-01-01",
  "porcentaje_propiedad": "100.00",
  "es_principal": true,
  "activo": true
}

CREAR PERSONA (Core)
URL: POST /api/viviendas/personas/
JSON:
{
  "nombre": "Roberto",
  "apellido": "Silva",
  "documento_identidad": "99887766",
  "telefono": "75678901",
  "email": "roberto.silva@example.com",
  "fecha_nacimiento": "1975-04-18",
  "genero": "M"
}

üí∞ GESTI√ìN DE PAGOS
-------------------

REGISTRAR PAGO
URL: POST /api/pagos/procesar/
Autenticaci√≥n: JWT Token requerido
JSON:
{
  "tipo_deuda": "expensa",
  "deuda_id": 1,
  "monto": "250.00",
  "metodo_pago": "transferencia",
  "referencia_transaccion": "TXN-2025-001",
  "comentarios": "Pago de expensa mensual enero 2025"
}

GENERAR DATOS DEMO
URL: POST /api/pagos/demo/
Autenticaci√≥n: JWT Token requerido
JSON:
{
  "cantidad_expensas": 3,
  "cantidad_multas": 1,
  "monto_expensa": "200.00",
  "monto_multa": "50.00"
}

üîç RECONOCIMIENTO FACIAL
------------------------

ENROLAMIENTO DE ROSTRO
URL: POST /api/seguridad/api/faces/enroll/
Formato: multipart/form-data
JSON:
{
  "copropietario_id": 1,
  "imagen": "archivo_imagen.jpg"
}

VERIFICACI√ìN DE ROSTRO
URL: POST /api/seguridad/api/faces/verify/
Formato: multipart/form-data
JSON:
{
  "copropietario_id": 1,
  "imagen": "archivo_imagen.jpg"
}

ELIMINAR ENROLAMIENTO
URL: DELETE /api/seguridad/api/faces/enroll/{copropietario_id}/

üìä CONSULTAS Y LISTAS
---------------------

CONSULTAR ESTADO DE SOLICITUD (P√∫blico)
URL: GET /api/authz/propietarios/solicitudes/status/{token}/

LISTAR SOLICITUDES PENDIENTES (Administrador)
URL: GET /api/authz/propietarios/admin/solicitudes/

MENU DEL PROPIETARIO
URL: GET /api/authz/propietarios/menu/
Autenticaci√≥n: JWT Token requerido

LISTAR FAMILIARES
URL: GET /api/authz/propietarios/familiares/
Autenticaci√≥n: JWT Token requerido

LISTAR INQUILINOS
URL: GET /api/authz/propietarios/inquilinos/
Autenticaci√≥n: JWT Token requerido

LISTAR DEUDAS PENDIENTES
URL: GET /api/pagos/deudas/
Autenticaci√≥n: JWT Token requerido

üîß GESTI√ìN DE USUARIOS Y ROLES
-------------------------------

CREAR ROL
URL: POST /api/authz/roles/
JSON:
{
  "nombre": "Propietario",
  "descripcion": "Propietario de unidad habitacional",
  "activo": true
}

CAMBIAR CONTRASE√ëA
URL: POST /api/authz/change-password/
Autenticaci√≥n: JWT Token requerido
JSON:
{
  "password_actual": "contrase√±a_actual",
  "password_nueva": "nueva_contrase√±a123",
  "password_nueva_confirm": "nueva_contrase√±a123"
}

SOLICITAR RECUPERACI√ìN DE CONTRASE√ëA
URL: POST /api/authz/solicitar-recuperacion-password/
JSON:
{
  "email": "usuario@example.com"
}

================================================================================
üìä 4. RESUMEN DE DATOS GENERADOS
================================================================================

DATOS GENERADOS POR COMANDO:
-----------------------------
‚îÇ Comando                          ‚îÇ Usuarios ‚îÇ Viviendas ‚îÇ Solicitudes ‚îÇ Copropietarios ‚îÇ Roles ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ crear_admin                     ‚îÇ 1 admin  ‚îÇ -         ‚îÇ -           ‚îÇ -              ‚îÇ 3     ‚îÇ
‚îÇ crear_datos_prueba_cu05         ‚îÇ ~11      ‚îÇ ~20       ‚îÇ -           ‚îÇ -              ‚îÇ -     ‚îÇ
‚îÇ crear_usuarios_facial           ‚îÇ ~8       ‚îÇ -         ‚îÇ -           ‚îÇ -              ‚îÇ 4     ‚îÇ
‚îÇ setup_registro_test             ‚îÇ -        ‚îÇ 10-20     ‚îÇ 5-10        ‚îÇ -              ‚îÇ -     ‚îÇ
‚îÇ crear_solicitudes_propietarios  ‚îÇ -        ‚îÇ -         ‚îÇ 5+          ‚îÇ -              ‚îÇ -     ‚îÇ
‚îÇ create_test_data                ‚îÇ -        ‚îÇ -         ‚îÇ -           ‚îÇ ~6             ‚îÇ -     ‚îÇ

TOTAL ESTIMADO DESPU√âS DE EJECUTAR TODOS:
------------------------------------------
üë• Usuarios: ~20 usuarios diversos
üè† Viviendas: ~35 viviendas 
üìù Solicitudes: ~15-20 solicitudes
üë§ Copropietarios: ~6 para facial
üé≠ Roles: 4 roles principales

RESUMEN POR CATEGOR√çA DE ENDPOINTS:
-----------------------------------
‚îÇ Categor√≠a              ‚îÇ Cantidad de Endpoints ‚îÇ Autenticaci√≥n Requerida ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Autenticaci√≥n         ‚îÇ 3                    ‚îÇ No                      ‚îÇ
‚îÇ Registro Propietarios ‚îÇ 5                    ‚îÇ Parcial (admin s√≠)      ‚îÇ
‚îÇ Gesti√≥n Familiares    ‚îÇ 2                    ‚îÇ S√≠ (JWT)                ‚îÇ
‚îÇ Gesti√≥n Inquilinos    ‚îÇ 2                    ‚îÇ S√≠ (JWT)                ‚îÇ
‚îÇ Gesti√≥n Viviendas     ‚îÇ 6                    ‚îÇ S√≠                      ‚îÇ
‚îÇ Pagos                 ‚îÇ 3                    ‚îÇ S√≠ (JWT)                ‚îÇ
‚îÇ Reconocimiento Facial ‚îÇ 4                    ‚îÇ S√≠                      ‚îÇ
‚îÇ Consultas             ‚îÇ 6                    ‚îÇ Parcial                 ‚îÇ
‚îÇ Administraci√≥n        ‚îÇ 4                    ‚îÇ S√≠                      ‚îÇ

Total: 35+ endpoints que requieren JSONs espec√≠ficos para poblar y probar el sistema completo.

================================================================================
üìù NOTAS IMPORTANTES
================================================================================

1. ORDEN DE EJECUCI√ìN: Seguir la secuencia recomendada para evitar errores de dependencias.

2. AUTENTICACI√ìN: Muchos endpoints requieren JWT tokens. Obtener tokens con el endpoint de login primero.

3. ARCHIVOS: Algunos endpoints requieren archivos en base64 o multipart/form-data.

4. TESTING: Usar Postman, Insomnia o curl para probar los endpoints con los JSONs proporcionados.

5. ADMINISTRACI√ìN: Los endpoints de administraci√≥n requieren usuarios con rol de administrador.

6. MIGRACIONES: Si aparecen errores relacionados con columnas faltantes (como vivienda_validada_id), 
   ejecutar: python manage.py migrate para aplicar las migraciones m√°s recientes.

7. ESTADO ACTUALIZADO: Todos los comandos han sido probados y funcionan correctamente (23/09/2025).

üö® ERRORES COMUNES Y SOLUCIONES:
-------------------------------

ERROR: "Esta c√©dula ya est√° registrada"
CAUSA: La c√©dula ya existe en la base de datos
SOLUCI√ìN: Usar una c√©dula diferente o verificar con:
python manage.py shell -c "from authz.models import Persona; [print(f'{p.documento_identidad}: {p.nombre}') for p in Persona.objects.all()]"

ERROR: "No existe la vivienda X en el sistema"  
CAUSA: El numero_casa no existe en las viviendas disponibles
SOLUCI√ìN: Verificar viviendas disponibles con:
python manage.py shell -c "from core.models import Vivienda; [print(v.numero_casa) for v in Vivienda.objects.all()]"

ERROR: "Usuario NO tiene solicitud aprobada" (Status 403)
CAUSA: Falta asociaci√≥n entre usuario y solicitud, o solicitud no aprobada
SOLUCI√ìN: 
- Verificar que la solicitud est√© aprobada
- Ejecutar: python manage.py aprobar_solicitud <ID> --admin-user <email_admin>

ERROR: "UNIQUE constraint failed: authz_persona.documento_identidad"
CAUSA: Se intenta crear una persona que ya existe en el sistema
SOLUCI√ìN AUTOM√ÅTICA: ‚úÖ El sistema ahora maneja autom√°ticamente este caso:
- Si existe la persona con la misma c√©dula Y email, reutiliza el usuario existente
- Solo asigna el rol de Propietario si no lo tiene
- Si existe la c√©dula pero con diferente email, muestra error descriptivo

ERROR: "La vivienda X ya tiene un propietario registrado"
CAUSA: La vivienda solicitada ya est√° ocupada por otro propietario
SOLUCI√ìN: Cambiar el numero_casa de la solicitud a una vivienda libre:
python manage.py shell -c "
from authz.models import *
solicitud = SolicitudRegistroPropietario.objects.get(id=X)
solicitud.numero_casa = 'VIVIENDA_LIBRE'
solicitud.save()
"

VERIFICAR VIVIENDAS LIBRES:
python manage.py shell -c "
from core.models import *
libres = []
for v in Vivienda.objects.all():
    props = Propiedad.objects.filter(vivienda=v, tipo_tenencia='propietario')
    if not props.exists(): libres.append(v.numero_casa)
print(f'Viviendas libres: {libres[:10]}')
"

‚úÖ FUNCIONALIDD CONFIRMADA - ASIGNACI√ìN AUTOM√ÅTICA DE ROLES:
-----------------------------------------------------------
Cuando un administrador aprueba una solicitud de propietario:
1. Se crea autom√°ticamente un Usuario con email/contrase√±a
2. Se asigna el ROL DE PROPIETARIO autom√°ticamente
3. Se crea la asociaci√≥n con la Vivienda solicitada  
4. Se actualiza el estado a 'APROBADA'
5. El propietario puede inmediatamente acceder al panel con sus permisos

COMPROBACI√ìN:
python manage.py shell -c "
from authz.models import *
usuario = Usuario.objects.get(email='email_del_propietario')
print(f'Roles: {[rol.nombre for rol in usuario.roles.all()]}')
"

VIVIENDAS DISPONIBLES DESPU√âS DE COMANDOS DE PRUEBA:
V001, V002, V003, V004, V005 (entre otras)

USUARIOS DE PRUEBA CREADOS:
- admin@facial.com / admin123 (Administrador)
- blancobautistaluisfernando@gmail.com / cliente123 (Propietario aprobado)

================================================================================
Fin de la Gu√≠a - Generado el 23 de Septiembre, 2025 
‚úÖ CONFIRMADO: Asignaci√≥n autom√°tica de roles al aprobar solicitudes
================================================================================

üéØ RESUMEN EJECUTIVO - FUNCIONALIDAD DE APROBACI√ìN:
--------------------------------------------------
‚úÖ API Endpoint: POST /api/authz/propietarios/admin/solicitudes/{id}/aprobar/
‚úÖ Comando CLI: python manage.py aprobar_solicitud {id} --admin-user {email}
‚úÖ M√©todo Modelo: solicitud.aprobar_solicitud(admin_user)

TODOS ASIGNAN AUTOM√ÅTICAMENTE:
- Rol de "Propietario" al usuario
- Usuario y contrase√±a funcional
- Asociaci√≥n con vivienda solicitada
- Estado "APROBADA" en la solicitud

USUARIOS DE PRUEBA CONFIRMADOS:
- pedro.l√≥pez1@test.com (V001) ‚úÖ
- suarezburgoshebert@gmail.com (V002) ‚úÖ
- pedro.s√°nchez2@test.com (V003) ‚úÖ 
- pedro.l√≥pez3@test.com (V004) ‚úÖ
- mar√≠a.mart√≠nez4@test.com (V005) ‚úÖ
- luis.mart√≠nez5@test.com (V006) ‚úÖ
- maria.gonzalez@facial.com (usuario existente) ‚úÖ

TOTAL: 7 usuarios con rol "Propietario" - Todos con acceso al panel.

üîß PROBLEMA RESUELTO - GESTI√ìN DE CONFLICTOS:
--------------------------------------------
‚úÖ UNIQUE constraint fixed: El sistema ahora maneja autom√°ticamente duplicados
‚úÖ Reutilizaci√≥n de usuarios: Si existe persona+email, asigna rol sin crear duplicado  
‚úÖ Validaci√≥n de viviendas: Verifica que la vivienda est√© libre antes de asignar
‚úÖ Mensajes descriptivos: Errores claros cuando hay conflictos irresolubles

================================================================================