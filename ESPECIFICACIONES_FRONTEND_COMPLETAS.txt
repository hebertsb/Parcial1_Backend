================================================================================
                    ESPECIFICACIONES COMPLETAS DEL FRONTEND
          Sistema de Reconocimiento Facial - Panel Propietarios y Seguridad
================================================================================

📋 ÍNDICE:
1. AUTENTICACIÓN Y AUTORIZACIÓN
2. PANEL DEL PROPIETARIO - GESTIÓN DE FOTOS
3. PANEL DE SEGURIDAD - VISUALIZACIÓN DE FOTOS
4. ENDPOINTS REQUERIDOS
5. COMPONENTES DE INTERFAZ
6. FUNCIONALIDADES ESPECÍFICAS
7. MANEJO DE ERRORES Y VALIDACIONES
8. CONFIGURACIÓN Y CONSTANTES
9. ESTRUCTURA DE ARCHIVOS RECOMENDADA
10. LIBRERÍAS Y DEPENDENCIAS

================================================================================
1. AUTENTICACIÓN Y AUTORIZACIÓN
================================================================================

🔐 SISTEMA DE LOGIN
Endpoint: POST /api/auth/login/
Request:
{
  "email": "string",
  "password": "string"
}

Response:
{
  "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
}

🔐 VERIFICACIÓN DE ROLES
- Propietario: Acceso al panel de gestión de fotos personales
- Seguridad: Acceso al panel de visualización de todas las fotos
- Administrador: Acceso completo

🔐 MIDDLEWARE DE AUTENTICACIÓN
- Almacenar JWT en localStorage/sessionStorage
- Interceptor para agregar Authorization header
- Redirección automática al login si token expira
- Refresh token automático

================================================================================
2. PANEL DEL PROPIETARIO - GESTIÓN DE FOTOS
================================================================================

📱 PANTALLA PRINCIPAL: "MIS FOTOS DE RECONOCIMIENTO"

🔧 FUNCIONALIDADES REQUERIDAS:

A) VER FOTOS EXISTENTES
Endpoint: GET /api/authz/propietarios/mis-fotos/
Response:
{
  "success": true,
  "data": {
    "total_fotos": 3,
    "fotos_urls": [
      "https://dl.dropboxusercontent.com/scl/fi/xyz/foto1.jpg",
      "https://dl.dropboxusercontent.com/scl/fi/abc/foto2.jpg",
      "https://dl.dropboxusercontent.com/scl/fi/def/foto3.jpg"
    ],
    "copropietario_id": 123,
    "reconocimiento_activo": true
  }
}

INTERFAZ REQUERIDA:
- Grid/Galería de fotos existentes
- Thumbnails de 150x150px
- Modal para ver foto en tamaño completo
- Indicador de "Reconocimiento Activo"
- Contador: "Tienes X fotos cargadas"

B) SUBIR NUEVA FOTO
Endpoint: POST /api/authz/propietarios/subir-foto/
Content-Type: multipart/form-data

INTERFAZ REQUERIDA:
- Área de drag & drop para subir foto
- Botón "Seleccionar Foto"
- Preview de la foto antes de enviar
- Barra de progreso durante la subida
- Validaciones:
  * Formatos: JPG, JPEG, PNG, GIF
  * Tamaño máximo: 5MB
  * Dimensiones mínimas: 300x300px (recomendado)

VALIDACIONES FRONTEND:
```javascript
const validarFoto = (file) => {
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
  const maxSize = 5 * 1024 * 1024; // 5MB
  
  if (!allowedTypes.includes(file.type)) {
    return { valid: false, error: 'Formato no permitido' };
  }
  
  if (file.size > maxSize) {
    return { valid: false, error: 'Archivo demasiado grande (máx 5MB)' };
  }
  
  return { valid: true };
};
```

C) INFORMACIÓN PERSONAL
Endpoint: GET /api/authz/propietarios/mi-informacion/
Response:
{
  "success": true,
  "data": {
    "copropietario": {
      "id": 123,
      "nombres": "Juan Carlos",
      "apellidos": "Pérez López",
      "numero_documento": "12345678",
      "unidad_residencial": "A-101",
      "tipo_residente": "Propietario",
      "telefono": "70123456",
      "email": "juan@email.com"
    },
    "reconocimiento_facial": {
      "total_fotos": 3,
      "activo": true,
      "fecha_ultimo_enrolamiento": "2025-09-28T10:30:00Z"
    }
  }
}

INTERFAZ REQUERIDA:
- Card con información personal
- Estado del reconocimiento facial
- Estadísticas de fotos subidas

================================================================================
3. PANEL DE SEGURIDAD - VISUALIZACIÓN DE FOTOS
================================================================================

📱 PANTALLA PRINCIPAL: "USUARIOS CON RECONOCIMIENTO FACIAL"

🔧 FUNCIONALIDADES REQUERIDAS:

A) LISTA DE USUARIOS CON FOTOS
Endpoint: GET /api/authz/seguridad/usuarios-con-fotos/
Response:
{
  "success": true,
  "data": {
    "total_usuarios": 4,
    "usuarios": [
      {
        "copropietario_id": 1,
        "nombre_completo": "Nombre Editado Apellido Editado",
        "documento": "12345678",
        "tipo_documento": "CC",
        "unidad_residencial": "Casa 999",
        "tipo_residente": "Propietario",
        "telefono": "77777777",
        "email": "maria.gonzalez@facial.com",
        "reconocimiento_id": 3,
        "total_fotos": 10,
        "fotos_urls": [
          "https://www.dropbox.com/scl/fi/a9ab591d92tb0pxgkmv1j/reconocimiento_20250928_033052_1.png?dl=1",
          "https://www.dropbox.com/scl/fi/iz767bxv2ky0349jz90cm/reconocimiento_20250928_033056_2.png?dl=1",
          "https://www.dropbox.com/scl/fi/kshlkp31taus4zdw834je/reconocimiento_20250928_033100_3.png?dl=1"
        ],
        "fecha_enrolamiento": "2025-09-28T10:30:52Z",
        "ultima_actualizacion": "2025-09-28T15:45:12Z",
        "activo": true
      }
    ]
  }
}

INTERFAZ REQUERIDA:
- Tabla/Cards con lista de usuarios
- Foto de perfil + nombre + documento + unidad
- Indicador de cantidad de fotos
- Botón "Ver Fotos" para cada usuario
- Filtros: Por tipo de residente, unidad, etc.
- Buscador por nombre/documento
- Estadísticas en dashboard

B) DETALLE DE USUARIO ESPECÍFICO
Endpoint: GET /api/authz/seguridad/usuario-fotos/{copropietario_id}/
Response:
{
  "success": true,
  "data": {
    "copropietario": {
      "id": 123,
      "nombre_completo": "Juan Carlos Pérez López",
      "documento": "12345678",
      "tipo_documento": "CI",
      "unidad_residencial": "A-101",
      "tipo_residente": "Propietario",
      "telefono": "70123456",
      "email": "juan@email.com",
      "activo": true
    },
    "reconocimiento": {
      "id": 456,
      "tiene_reconocimiento": true,
      "total_fotos": 5,
      "fotos_urls": [
        "https://dl.dropboxusercontent.com/scl/fi/abc/foto1.jpg",
        "https://dl.dropboxusercontent.com/scl/fi/def/foto2.jpg",
        "https://dl.dropboxusercontent.com/scl/fi/ghi/foto3.jpg",
        "https://dl.dropboxusercontent.com/scl/fi/jkl/foto4.jpg",
        "https://dl.dropboxusercontent.com/scl/fi/mno/foto5.jpg"
      ],
      "fecha_enrolamiento": "2025-09-28T10:30:00Z",
      "ultima_actualizacion": "2025-09-28T15:45:00Z",
      "proveedor_ia": "Local",
      "activo": true
    }
  }
}

INTERFAZ REQUERIDA:
- Modal/Página con información completa del usuario
- Galería de TODAS las fotos del usuario
- Grid de fotos con thumbnails 200x200px
- Modal para ver fotos en tamaño completo
- Información de fechas de enrolamiento
- Navegación entre fotos (anterior/siguiente)

C) ESTADÍSTICAS DEL SISTEMA
Endpoint: GET /api/authz/seguridad/estadisticas-reconocimiento/
Response:
{
  "success": true,
  "data": {
    "totales": {
      "copropietarios_activos": 16,
      "usuarios_con_reconocimiento": 9,
      "usuarios_con_fotos": 4,
      "total_fotos_sistema": 22
    },
    "porcentajes": {
      "cobertura_reconocimiento": 56.25,
      "usuarios_con_fotos": 25.0
    },
    "por_tipo_residente": {
      "Propietario": 13,
      "Inquilino": 2,
      "Familiar": 1
    },
    "promedio_fotos_por_usuario": 5.5
  }
}

INTERFAZ REQUERIDA:
- Dashboard con métricas clave
- Gráficos de barras/donut para estadísticas
- Cards con números grandes para totales
- Indicadores de porcentaje de cobertura

================================================================================
4. ENDPOINTS REQUERIDOS - LISTA COMPLETA
================================================================================

🔗 AUTENTICACIÓN:
POST /api/auth/login/
POST /api/auth/refresh/
POST /api/auth/verify/

🔗 PANEL PROPIETARIO:
GET  /api/authz/propietarios/mi-informacion/
GET  /api/authz/propietarios/mis-fotos/
POST /api/authz/propietarios/subir-foto/

🔗 PANEL SEGURIDAD:
GET  /api/authz/seguridad/usuarios-con-fotos/
GET  /api/authz/seguridad/usuario-fotos/{copropietario_id}/
GET  /api/authz/seguridad/estadisticas-reconocimiento/

================================================================================
5. COMPONENTES DE INTERFAZ REQUERIDOS
================================================================================

📋 COMPONENTES COMUNES:

A) PhotoGallery.vue/jsx
- Props: photos (array de URLs), columns (número de columnas)
- Funciones: onClick para modal, lazy loading
- Estilos: Grid responsivo, hover effects

B) PhotoUpload.vue/jsx
- Drag & drop area
- File input
- Progress bar
- Preview
- Validaciones

C) UserCard.vue/jsx
- Foto de perfil
- Información básica
- Badge de estado
- Botones de acción

D) StatCard.vue/jsx
- Número grande
- Descripción
- Icono
- Color de fondo

E) PhotoModal.vue/jsx
- Imagen en tamaño completo
- Navegación anterior/siguiente
- Zoom
- Información de la foto

📋 LAYOUTS:

A) DashboardLayout.vue/jsx
- Sidebar con navegación
- Header con usuario logueado
- Área de contenido principal
- Responsive

B) AuthLayout.vue/jsx
- Pantalla de login centrada
- Logo del sistema
- Form de autenticación

================================================================================
6. FUNCIONALIDADES ESPECÍFICAS
================================================================================

🔧 PROPIETARIO:

A) Gestión de Fotos:
```javascript
// Subir foto
const subirFoto = async (file) => {
  const formData = new FormData();
  formData.append('foto', file);
  
  try {
    const response = await api.post('/api/authz/propietarios/subir-foto/', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
      onUploadProgress: (progressEvent) => {
        const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
        setUploadProgress(progress);
      }
    });
    
    if (response.data.success) {
      // Actualizar lista de fotos
      await cargarMisFotos();
      showSuccessMessage('Foto subida correctamente');
    }
  } catch (error) {
    showErrorMessage('Error al subir la foto');
  }
};

// Cargar mis fotos
const cargarMisFotos = async () => {
  try {
    const response = await api.get('/api/authz/propietarios/mis-fotos/');
    if (response.data.success) {
      setFotos(response.data.data.fotos_urls);
      setTotalFotos(response.data.data.total_fotos);
    }
  } catch (error) {
    showErrorMessage('Error al cargar las fotos');
  }
};
```

🔧 SEGURIDAD:

A) Lista de Usuarios:
```javascript
// Cargar usuarios con reconocimiento
const cargarUsuarios = async (filtros = {}) => {
  try {
    const params = new URLSearchParams(filtros);
    const response = await api.get(`/api/authz/seguridad/usuarios-con-fotos/?${params}`);
    
    if (response.data.success) {
      setUsuarios(response.data.data.usuarios);
      setTotalUsuarios(response.data.data.total_usuarios);
    }
  } catch (error) {
    showErrorMessage('Error al cargar usuarios');
  }
};

// Ver fotos de usuario específico
const verFotosUsuario = async (copropietarioId) => {
  try {
    const response = await api.get(`/api/authz/seguridad/usuario-fotos/${copropietarioId}/`);
    
    if (response.data.success) {
      setUsuarioSeleccionado(response.data.data);
      setModalFotosVisible(true);
    }
  } catch (error) {
    showErrorMessage('Error al cargar fotos del usuario');
  }
};
```

B) Búsqueda y Filtros:
```javascript
const filtros = {
  busqueda: '', // Por nombre o documento
  tipo_residente: '', // Propietario, Inquilino, Familiar
  unidad_desde: '',
  unidad_hasta: '',
  con_fotos: true // Solo usuarios con fotos
};
```

================================================================================
7. MANEJO DE ERRORES Y VALIDACIONES
================================================================================

⚠️ ERRORES COMUNES A MANEJAR:

A) Errores de Subida de Fotos:
- 400: "No se proporcionó ninguna foto"
- 400: "Formato de imagen no válido"
- 400: "Imagen demasiado grande (máx 5MB)"
- 500: "Error al subir foto a Dropbox"
- 404: "Propietario no encontrado"

B) Errores de Autenticación:
- 401: "Token expirado" → Refresh automático
- 403: "Sin permisos" → Redirección a login
- 403: "No tienes permisos para acceder a esta información"

C) Errores de Red:
- Network Error → "Error de conexión, intenta nuevamente"
- Timeout → "La petición tardó demasiado"

⚠️ VALIDACIONES FRONTEND:

```javascript
const validaciones = {
  foto: {
    tipos: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'],
    tamanoMax: 5 * 1024 * 1024, // 5MB
    dimensionesMin: { width: 300, height: 300 }
  },
  
  busqueda: {
    minLength: 2,
    maxLength: 50
  }
};

const mostrarError = (mensaje, tipo = 'error') => {
  // Toast/Snackbar/Alert
  // Duración: 5 segundos para errores, 3 para éxito
};
```

================================================================================
8. CONFIGURACIÓN Y CONSTANTES
================================================================================

⚙️ ARCHIVO DE CONFIGURACIÓN:

```javascript
// config.js
export const API_CONFIG = {
  BASE_URL: process.env.REACT_APP_API_URL || 'http://localhost:8000',
  TIMEOUT: 30000,
  
  ENDPOINTS: {
    AUTH: {
      LOGIN: '/api/auth/login/',
      REFRESH: '/api/auth/refresh/',
      VERIFY: '/api/auth/verify/'
    },
    PROPIETARIO: {
      MI_INFO: '/api/authz/propietarios/mi-informacion/',
      MIS_FOTOS: '/api/authz/propietarios/mis-fotos/',
      SUBIR_FOTO: '/api/authz/propietarios/subir-foto/'
    },
    SEGURIDAD: {
      USUARIOS_CON_FOTOS: '/api/authz/seguridad/usuarios-con-fotos/',
      DETALLE_USUARIO: '/api/authz/seguridad/usuario-fotos/',
      ESTADISTICAS: '/api/authz/seguridad/estadisticas-reconocimiento/'
    }
  }
};

export const UI_CONFIG = {
  FOTO_CONFIG: {
    THUMBNAIL_SIZE: 150,
    PREVIEW_SIZE: 200,
    MAX_FILE_SIZE: 5 * 1024 * 1024,
    ALLOWED_TYPES: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif']
  },
  
  PAGINATION: {
    DEFAULT_PAGE_SIZE: 20,
    MAX_PAGE_SIZE: 100
  },
  
  COLORS: {
    PRIMARY: '#2563eb',
    SUCCESS: '#10b981',
    ERROR: '#ef4444',
    WARNING: '#f59e0b'
  }
};
```

================================================================================
9. ESTRUCTURA DE ARCHIVOS RECOMENDADA
================================================================================

📁 ESTRUCTURA FRONTEND:

```
src/
├── components/
│   ├── common/
│   │   ├── PhotoGallery.vue
│   │   ├── PhotoUpload.vue
│   │   ├── PhotoModal.vue
│   │   ├── UserCard.vue
│   │   ├── StatCard.vue
│   │   └── LoadingSpinner.vue
│   ├── auth/
│   │   ├── LoginForm.vue
│   │   └── ProtectedRoute.vue
│   └── layout/
│       ├── DashboardLayout.vue
│       ├── Sidebar.vue
│       └── Header.vue
├── pages/
│   ├── auth/
│   │   └── Login.vue
│   ├── propietario/
│   │   ├── Dashboard.vue
│   │   ├── MisFotos.vue
│   │   └── MiInformacion.vue
│   └── seguridad/
│       ├── Dashboard.vue
│       ├── UsuariosReconocimiento.vue
│       ├── DetalleUsuario.vue
│       └── Estadisticas.vue
├── services/
│   ├── api.js
│   ├── auth.js
│   ├── propietario.js
│   └── seguridad.js
├── store/
│   ├── auth.js
│   ├── propietario.js
│   └── seguridad.js
├── utils/
│   ├── validators.js
│   ├── formatters.js
│   └── constants.js
└── config/
    └── api.config.js
```

================================================================================
10. LIBRERÍAS Y DEPENDENCIAS RECOMENDADAS
================================================================================

📦 DEPENDENCIAS CORE:

React/Vue.js:
```json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "axios": "^1.3.0",
    "react-query": "^3.39.0",
    "react-hook-form": "^7.43.0",
    "react-dropzone": "^14.2.0",
    "react-image-gallery": "^1.2.11",
    "react-modal": "^3.16.1",
    "react-toastify": "^9.1.0",
    "tailwindcss": "^3.2.0",
    "lucide-react": "^0.220.0"
  }
}
```

Vue.js:
```json
{
  "dependencies": {
    "vue": "^3.2.0",
    "vue-router": "^4.1.0",
    "pinia": "^2.0.0",
    "axios": "^1.3.0",
    "vue-query": "^1.26.0",
    "vue-dropzone": "^6.0.0",
    "vue-image-lightbox": "^7.3.0",
    "vue-toastification": "^2.0.0",
    "tailwindcss": "^3.2.0",
    "lucide-vue-next": "^0.220.0"
  }
}
```

📦 FUNCIONALIDADES ESPECÍFICAS:

Para Subida de Archivos:
- react-dropzone / vue-dropzone
- react-image-crop / vue-cropperjs (para recortar fotos)

Para Galería de Fotos:
- react-image-gallery / vue-image-lightbox
- react-masonry-css / vue-masonry-wall

Para Gráficos (Estadísticas):
- recharts / chart.js
- react-chartjs-2 / vue-chartjs

Para Notificaciones:
- react-toastify / vue-toastification
- react-hot-toast / vue-toast-notification

================================================================================
11. FEATURES ADICIONALES RECOMENDADAS
================================================================================

🚀 FUNCIONALIDADES EXTRA:

A) Para Propietarios:
- Historial de fotos subidas con fechas
- Posibilidad de eliminar fotos (backend ya implementado)
- Notificaciones cuando se actualiza el reconocimiento
- Tutorial de cómo tomar buenas fotos

B) Para Seguridad:
- Búsqueda avanzada con múltiples filtros
- Exportar lista de usuarios a PDF/Excel
- Comparación lado a lado de fotos
- Marcar usuarios como "verificados"
- Dashboard con gráficos de tendencias

C) Generales:
- Modo oscuro/claro
- Soporte para múltiples idiomas
- Notificaciones push
- Caché inteligente de imágenes
- Lazy loading para mejor performance
- PWA (Progressive Web App)

================================================================================
12. TESTING RECOMENDADO
================================================================================

🧪 PRUEBAS A IMPLEMENTAR:

A) Unit Tests:
- Validaciones de formularios
- Utilidades de formateo
- Componentes individuales

B) Integration Tests:
- Flujo completo de subida de fotos
- Autenticación y autorización
- Navegación entre pantallas

C) E2E Tests:
- Login → Subir foto → Ver resultado
- Panel de seguridad → Ver fotos de usuario
- Manejo de errores de red

================================================================================
                                RESUMEN FINAL
================================================================================

✅ CHECKLIST DE IMPLEMENTACIÓN:

□ Sistema de autenticación con JWT
□ Panel propietario con subida de fotos
□ Panel seguridad con visualización de fotos
□ Todos los endpoints conectados
□ Manejo de errores robusto
□ Validaciones frontend y backend
□ Interfaz responsiva
□ Componentes reutilizables
□ Estados de carga y progreso
□ Notificaciones de éxito/error

📋 PRIORIDADES:
1. CRÍTICO: Autenticación y rutas protegidas
2. CRÍTICO: Subida de fotos para propietarios
3. CRÍTICO: Visualización de fotos para seguridad
4. IMPORTANTE: Validaciones y manejo de errores
5. IMPORTANTE: Interfaz intuitiva y responsiva
6. OPCIONAL: Features adicionales y optimizaciones

================================================================================
                        CORRECCIONES Y ACTUALIZACIONES
================================================================================

📋 CORRECCIONES APLICADAS (28/09/2025):

✅ ENDPOINTS DE AUTENTICACIÓN CORREGIDOS:
   - Login: POST /api/auth/login/ (no /api/authz/auth/login/)
   - Refresh: POST /api/auth/refresh/
   - Verify: POST /api/auth/verify/

✅ PAYLOAD DE LOGIN CORREGIDO:
   - Campo: "email" (no "username")
   - Respuesta: { "refresh": "...", "access": "..." }

✅ ENDPOINTS DE SEGURIDAD CORREGIDOS:
   - ❌ Eliminado: GET /api/seguridad/usuarios-reconocimiento/ (404)
   - ✅ Correcto: GET /api/authz/seguridad/usuarios-con-fotos/
   - ✅ Correcto: GET /api/authz/seguridad/usuario-fotos/{id}/
   - ✅ Correcto: GET /api/authz/seguridad/estadisticas-reconocimiento/

✅ ESTRUCTURA DE RESPUESTAS ACTUALIZADA:
   - Usuarios con fotos: { "success": true, "data": { "total_usuarios": N, "usuarios": [...] } }
   - Estadísticas reales del sistema actual
   - URLs de Dropbox en formato correcto

✅ URLs DE DROPBOX CORREGIDAS:
   - ❌ Formato anterior: https://www.dropbox.com/scl/fi/ID/file.jpg?dl=1
   - ✅ Formato correcto: https://dl.dropboxusercontent.com/scl/fi/ID/file.jpg
   - ✅ Las URLs ahora se muestran directamente como imágenes en <img> tags
   - ✅ Backend actualizado para generar URLs en formato correcto

✅ CREDENCIALES DE PRUEBA VERIFICADAS:
   - Seguridad: seguridad@facial.com / seguridad123
   - Propietarios: maria.gonzalez@facial.com / 123456 (con 10 fotos)
   - Propietarios: tito@gmail.com / 123456 (con 5 fotos)

📸 IMPORTANTE PARA FRONTEND:
   - Las URLs de fotos ahora están en formato directo para <img src="URL" />
   - No necesitas procesar ni convertir las URLs
   - Usar crossOrigin="anonymous" si hay problemas CORS
   - Ejemplo: <img src="https://dl.dropboxusercontent.com/scl/fi/xyz/foto.jpg" alt="Foto" />

================================================================================
                           ¡IMPLEMENTACIÓN LISTA!
================================================================================